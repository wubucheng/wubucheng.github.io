<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无编程</title>
  
  <subtitle>wubc的个人博客，公众号：后端随笔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="wubc.me/"/>
  <updated>2020-03-21T12:42:22.726Z</updated>
  <id>wubc.me/</id>
  
  <author>
    <name>wubc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java多线程知识复习(一)</title>
    <link href="wubc.me/2020/03/21/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/"/>
    <id>wubc.me/2020/03/21/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-03-21T12:40:12.000Z</published>
    <updated>2020-03-21T12:42:22.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java多线程复习总结"><a href="#Java多线程复习总结" class="headerlink" title="Java多线程复习总结"></a>Java多线程复习总结</h1><h3 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><p>待补充</p><h3 id="2、线程局部变量-ThreadLocal"><a href="#2、线程局部变量-ThreadLocal" class="headerlink" title="2、线程局部变量 ThreadLocal"></a>2、线程局部变量 ThreadLocal</h3><p>用于实现线程内的数据共享。</p><p>使用set方法时会先获取当前线程的ThreadLocalMap 对象，而这个对象的key又是一个ThreadLocal对象。每个线程其实都有一份自己独享的 ThreadLocalMap 对象.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">    table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">    <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">    table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">    size = <span class="number">1</span>;</span><br><span class="line">    setThreshold(INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用场景;</p><blockquote><ul><li>订单流水</li></ul></blockquote><h3 id="3、Java并发编程库：JUC"><a href="#3、Java并发编程库：JUC" class="headerlink" title="3、Java并发编程库：JUC"></a>3、Java并发编程库：JUC</h3><ul><li>java.util.concurrent 多线程并发库</li><li>java.util.concurrent.atomic 提供原子性操作的工具类包</li><li>java.util.concurrent.lock 提供锁机制</li></ul><h4 id="3、1-java-util-concurrent-多线程并发库"><a href="#3、1-java-util-concurrent-多线程并发库" class="headerlink" title="3、1 java.util.concurrent 多线程并发库"></a>3、1 java.util.concurrent 多线程并发库</h4><p>1）执行程序：</p><h5 id="Executors-线程池工厂类：-减少线程的重复创建。提供线程利用率"><a href="#Executors-线程池工厂类：-减少线程的重复创建。提供线程利用率" class="headerlink" title="Executors 线程池工厂类： 减少线程的重复创建。提供线程利用率"></a>Executors 线程池工厂类： 减少线程的重复创建。提供线程利用率</h5><p>使用Executors创建线程池的用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建固定的线程池</span></span><br><span class="line">ExecutorService fPool = Executors.newFixedThreadPool();</span><br><span class="line"><span class="comment">//创建缓存大小的线程池</span></span><br><span class="line">ExecutorService cPool = Executors.newCachedThreadPool();</span><br><span class="line"><span class="comment">//创建单一的线程池</span></span><br><span class="line">ExecutorService sPool = Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">//创建带有定时调度的线程池</span></span><br><span class="line">Executors.newScheduledThreadPool()</span><br></pre></td></tr></table></figure><blockquote><p>ExecutorService 使用：</p></blockquote><ul><li>execute(Runnable) ： 无返回值</li><li>submit(Runnable)：返回一个 Future 对象</li><li>submit(Callable)：返回一个 Future 对象</li><li>invokeAny(…)：返回其中一个 Callable 对象的结果</li><li>invokeAll(…)：返回一系列的 Future 对象</li></ul><blockquote><p>Executors 关闭</p></blockquote><ul><li>shutdown ：关闭之前提交的任务可以继续执行知道结束</li><li>shutdownNow：中断大部分线程</li></ul><blockquote><p>corePoolSize和maximumPoolSize<br>判断线程池是否创建新的线程</p></blockquote><h5 id="ForkJoinPool-合并和分叉（线程池）"><a href="#ForkJoinPool-合并和分叉（线程池）" class="headerlink" title="ForkJoinPool 合并和分叉（线程池）"></a>ForkJoinPool 合并和分叉（线程池）</h5><p>可以将大任务分割成若干子任务，等到所有子任务完成任务后，将结果合并返回。<br>任务类型：</p><ul><li>RecursiveAction：没有返回值</li><li>RecursiveTask：有返回值，使用join方法获取各个任务的结果，最后使用ForkJoinPool.invoke()获取最终的结果</li></ul><h4 id="3、2-阻塞队列"><a href="#3、2-阻塞队列" class="headerlink" title="3、2 阻塞队列"></a>3、2 阻塞队列</h4><p>特点：入队列：队列已满，阻塞直到有空位；出队列：队列为空，阻塞直到有队列不为空。</p><p>场景：一个线程生成、另一个线程消费。</p><p><strong>BlockingQueue</strong> 的方法：</p><table><thead><tr><th>方法\处理方式</th><th>抛出异常</th><th>返回特殊值</th><th>一直阻塞</th><th>超时退出</th></tr></thead><tbody><tr><td>插入方法</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e,time,unit)</td></tr><tr><td>移除方法</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(time,unit)</td></tr><tr><td>检查方法</td><td>element()</td><td>peek()</td><td>不可用</td><td>不可用</td></tr></tbody></table><p>队列中元素不能为空</p><p>BlockingQueue 的实现类：</p><ul><li>ArrayBlockingQueue：有界的阻塞队列，底层基于数组实现，存储的元素有上限，一般这个上限初始化时就指定了，后面就无法修改了。</li><li>DelayQueue：对元素进行持有直到一个特定的延迟到期。队列中元素必须实现java.util.concurrent.Delayed 接口</li><li>LinkedBlockingQueue：以链式结果进行元素的存储，默认上限为：Integer.MAX_VALUE</li><li>PriorityBlockingQueue： 无界阻塞优先级队列，队列中元素必须实现 java.lang.Comparable 接口。</li><li>SynchronousQueue：只能存放单个元素</li></ul><p><strong>LinkedBlockingQueue</strong>：<br>notFull:表示的等待存放的条件队列<br>notEmpty: 表示等待取出的条件队列</p><ul><li>offer方法</li></ul><h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h4><p>通过全局锁的方式，同时只能有一个线程进行存放元素到队列或一个线程从队列中获取元素</p><ul><li><p>offer方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        checkNotNull(e);</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == items.length)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                enqueue(e);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">该方法首先获取锁，通过其构造方法可以知道，这个锁是非公平锁：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">    public ArrayBlockingQueue(int capacity, boolean fair) &#123;</span><br><span class="line">        if (capacity &lt;&#x3D; 0)</span><br><span class="line">            throw new IllegalArgumentException();</span><br><span class="line">        this.items &#x3D; new Object[capacity];</span><br><span class="line">        lock &#x3D; new ReentrantLock(fair);</span><br><span class="line">        notEmpty &#x3D; lock.newCondition();</span><br><span class="line">        notFull &#x3D;  lock.newCondition();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>note</strong>: 非公平锁：直接尝试占有锁；公平锁，先判断当前线程是否是第一个线程，是则获取锁，否则添加到等待队列上。</p><p>然后调用enqueue方法将元素添加到队列上;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert lock.getHoldCount() == 1;</span></span><br><span class="line">    <span class="comment">// assert items[putIndex] == null;</span></span><br><span class="line">    <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</span><br><span class="line">    items[putIndex] = x;</span><br><span class="line">    <span class="keyword">if</span> (++putIndex == items.length)</span><br><span class="line">        putIndex = <span class="number">0</span>;</span><br><span class="line">    count++;</span><br><span class="line">    notEmpty.signal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加完后，通过 <strong>notEmpty.signal()</strong> 知非空对队列。</p><p>notEmpty和notFull是Condition类型的示例.</p></li></ul><h3 id="PriorityBlockingQueue-无界优先级队列"><a href="#PriorityBlockingQueue-无界优先级队列" class="headerlink" title="PriorityBlockingQueue 无界优先级队列"></a>PriorityBlockingQueue 无界优先级队列</h3><p>内部使用到比较器，用来比较元素大小，由于这是无界队列所以这里没有notFul。默认按元素升序。元素需要实现Comparable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_INITIAL_CAPACITY = <span class="number">11</span> <span class="comment">//队列默认大小</span></span><br></pre></td></tr></table></figure><p>为什么是11？</p><ul><li><p>offer 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">     <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">     lock.lock();</span><br><span class="line">     <span class="keyword">int</span> n, cap;</span><br><span class="line">     Object[] array;</span><br><span class="line">    <span class="comment">// 元素个数大于了队列容量，则使用tryGrow进行扩容</span></span><br><span class="line">     <span class="keyword">while</span> ((n = size) &gt;= (cap = (array = queue).length))</span><br><span class="line">         tryGrow(array, cap);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         Comparator&lt;? <span class="keyword">super</span> E&gt; cmp = comparator;</span><br><span class="line">         <span class="keyword">if</span> (cmp == <span class="keyword">null</span>)</span><br><span class="line">             siftUpComparable(n, e, array);</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             siftUpUsingComparator(n, e, array, cmp);</span><br><span class="line">         size = n + <span class="number">1</span>;</span><br><span class="line">         notEmpty.signal();</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         lock.unlock();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里可以看到扩容时调用了tryGrow方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tryGrow</span><span class="params">(Object[] array, <span class="keyword">int</span> oldCap)</span> </span>&#123;</span><br><span class="line">    lock.unlock(); <span class="comment">// must release and then re-acquire main lock</span></span><br><span class="line">    Object[] newArray = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (allocationSpinLock == <span class="number">0</span> &amp;&amp;</span><br><span class="line">        UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, allocationSpinLockOffset,</span><br><span class="line">                                 <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果oldCap大于等于64，那么队列新的容量则扩容50%</span></span><br><span class="line">            <span class="keyword">int</span> newCap = oldCap + ((oldCap &lt; <span class="number">64</span>) ?</span><br><span class="line">                                   (oldCap + <span class="number">2</span>) : <span class="comment">// grow faster if small</span></span><br><span class="line">                                   (oldCap &gt;&gt; <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (newCap - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;    <span class="comment">// possible overflow</span></span><br><span class="line">                <span class="keyword">int</span> minCap = oldCap + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (minCap &lt; <span class="number">0</span> || minCap &gt; MAX_ARRAY_SIZE)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">                newCap = MAX_ARRAY_SIZE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (newCap &gt; oldCap &amp;&amp; queue == array)</span><br><span class="line">                newArray = <span class="keyword">new</span> Object[newCap];</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            allocationSpinLock = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newArray == <span class="keyword">null</span>) <span class="comment">// back off if another thread is allocating</span></span><br><span class="line">        Thread.yield();</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">if</span> (newArray != <span class="keyword">null</span> &amp;&amp; queue == array) &#123;</span><br><span class="line">        queue = newArray;</span><br><span class="line">        System.arraycopy(array, <span class="number">0</span>, newArray, <span class="number">0</span>, oldCap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>note</strong>：</p><ul><li><p>为什么是64作为阈值？</p></li><li><p>为什么要提前释放锁</p></li><li><p>扩容的时候可以进行入队列操作，所以是用到CAS，只允许一个线程进行扩容，如果扩容失败了，则通过Thread.yield()让出CPU，让改线程重新获取锁。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (newArray &#x3D;&#x3D; null) &#x2F;&#x2F; back off if another thread is allocating</span><br><span class="line">    Thread.yield();</span><br></pre></td></tr></table></figure></blockquote><p>复制数组是在获取锁后面才执行的，是为了保证复制的数组是最新的。</p><p>排序方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">siftUpComparable</span><span class="params">(<span class="keyword">int</span> k, T x, Object[] array)</span> </span>&#123;</span><br><span class="line">    Comparable&lt;? <span class="keyword">super</span> T&gt; key = (Comparable&lt;? <span class="keyword">super</span> T&gt;) x;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 确定父节点元素位置</span></span><br><span class="line">        <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//获取父节点的值</span></span><br><span class="line">        Object e = array[parent];</span><br><span class="line">        <span class="comment">// 如果插入的值比父节点大，那么完成堆的建立</span></span><br><span class="line">        <span class="keyword">if</span> (key.compareTo((T) e) &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        array[k] = e;</span><br><span class="line">        k = parent;</span><br><span class="line">    &#125;</span><br><span class="line">    array[k] = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>例子：假设有三个节点0、1、2，值也是0、1、2。1、2分别是0节点的左右子节点，那么如果插入的k=3,这时先找出他要插入位置的父节点，通过<strong>(k-1)&gt;&gt;&gt;1</strong>可以得出，parent=1,也就是1节点，这个时候将这个插入的值跟其父节点的值进行比较，如果发现是大于父节点的值，那么完成堆的构建，跳出循环。否则与父节点进行交换，</p></li></ul><ul><li><p>poll方法</p><p>该方法通过dequeue方法进行出队列，获取元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Object[] array = queue;</span><br><span class="line">        E result = (E) array[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 获取队列尾部元素，然后将原来的位置的指向设置为空</span></span><br><span class="line">        E x = (E) array[n];</span><br><span class="line">        array[n] = <span class="keyword">null</span>;</span><br><span class="line">        Comparator&lt;? <span class="keyword">super</span> E&gt; cmp = comparator;</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">// 把元素插入到下标为0的位置上，然后调整成最小堆</span></span><br><span class="line">            siftDownComparable(<span class="number">0</span>, x, array, n);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            siftDownUsingComparator(<span class="number">0</span>, x, array, n, cmp);</span><br><span class="line">        size = n;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>note</strong>：最小堆构建过程</p></li></ul><ul><li><p>take操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    E result;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> ( (result = dequeue()) == <span class="keyword">null</span>)</span><br><span class="line">            notEmpty.await();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>队列没有元素则一直阻塞</p></li></ul><h5 id="DelayQueue-延时无界阻塞队列"><a href="#DelayQueue-延时无界阻塞队列" class="headerlink" title="DelayQueue 延时无界阻塞队列"></a>DelayQueue 延时无界阻塞队列</h5><p>DelayQueue = BlockingQueue +PriorityQueue + Delayed</p><h4 id="3、3-非阻塞队列"><a href="#3、3-非阻塞队列" class="headerlink" title="3、3 非阻塞队列"></a>3、3 非阻塞队列</h4><p>消费者出队和生产者入队都不会被阻塞。常用方法跟阻塞队列差不多。</p><h5 id="悲观锁和乐观锁"><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h5><p>悲观锁：认为发送了冲突，那么就会破坏数据的一致性，因此使用独占锁禁止冲突发送。<br>乐观锁：认为即使发送了冲突，也不一定造成损坏</p><h5 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h5><p>CAS(V,A,B)，包含了三个值，内存地址V，旧的预期值A，要修改的新值B。当V的值等于A时，才会将V的值更新为B</p><h5 id="ConcurrentLinkedQueue-非阻塞无界链表队列"><a href="#ConcurrentLinkedQueue-非阻塞无界链表队列" class="headerlink" title="ConcurrentLinkedQueue 非阻塞无界链表队列"></a>ConcurrentLinkedQueue 非阻塞无界链表队列</h5><p>采用先进先出的入队原则。采用CAS解决当前节点与下一节点之间的安全性链接和对当前节点的赋值。<br>相关入队和出队方法可以参考《Java并发编程的艺术》P161~P167</p><h5 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h5><p> 采用“分段锁”策略,有多个segment组成，segment使用的重入锁，每个segment内部又维护hashentity 。默认下允许16个线程并发（最大并发数为 65536？）<br> 构造方法分析得出的结论：</p><blockquote><p><em>Segment 数组的大小 ssize 是由 concurrentLevel 来决定的，但是却不一定等于concurrentLevel，ssize 一定是大于或等于 concurrentLevel 的最小的 2 的次幂。比如：默认情况下concurrentLevel 是 16，则 ssize 为 16；若 concurrentLevel 为 14，ssize 为 16；若 concurrentLevel 为17， 则 ssize 为 32。 为什么 Segment 的数组大小一定是 2 的次幂？其实主要是便于通过按位与的散列算法来定位 Segment 的 index。</em></p></blockquote><p><em>分析见《Java并发编程艺术》P158~P159</em></p><p><strong>note</strong>:ssize最大值为65536，segmentShift最大值为16？segmentMask最大值为65535</p><h5 id="ConcurrentSkipListMap-非阻塞-Hash-跳表集合"><a href="#ConcurrentSkipListMap-非阻塞-Hash-跳表集合" class="headerlink" title="ConcurrentSkipListMap 非阻塞 Hash 跳表集合"></a>ConcurrentSkipListMap 非阻塞 Hash 跳表集合</h5><p>与TreeMap类型，都是有序的哈希表，主要区别为：</p><ul><li>ConcurrentSkipListMap是线程安全，TreeMap非线程安全</li><li>ConcurrentSkipListMap通过<strong>跳表</strong>实现，而TreeMap通过<strong>红黑树</strong>实现</li></ul><p><strong>SkipList</strong>跳表：</p><blockquote></blockquote><p>ConcurrentSkipListMap 提供了一种线程安全的并发访问的排序映射表,主要用到了 Node 和 Index 两种节点的存储方式， 通过 volatile 关键字实现了并发的操做</p><h4 id="原子包"><a href="#原子包" class="headerlink" title="原子包"></a>原子包</h4><h4 id="AtomicBoolean-原子性布尔"><a href="#AtomicBoolean-原子性布尔" class="headerlink" title="AtomicBoolean 原子性布尔"></a>AtomicBoolean 原子性布尔</h4><p>方法：</p><ul><li><strong>compareAndSet(expectedValue, updateValue)</strong>：如果比较的值等于expectedValue，那么原子性的将expectedValue更新为updateValue。</li><li>getAndSet(boolean b),返回原来的值，并设置新值为b</li></ul><h4 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h4><h5 id="AtomicIntegerArray-原子性整型数组"><a href="#AtomicIntegerArray-原子性整型数组" class="headerlink" title="AtomicIntegerArray 原子性整型数组"></a>AtomicIntegerArray 原子性整型数组</h5><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="实现线程的方式有哪些："><a href="#实现线程的方式有哪些：" class="headerlink" title="实现线程的方式有哪些："></a>实现线程的方式有哪些：</h4><ul><li>继承Thread</li><li>实现Runnable</li><li>使用Excutor</li></ul><h4 id="wait和sleep区别："><a href="#wait和sleep区别：" class="headerlink" title="wait和sleep区别："></a>wait和sleep区别：</h4><p>wait会释放锁，sleep会一直持有锁;wait是所有object都有方法，sleep是线程类所有的。</p><h5 id="synchronized-和-volatile"><a href="#synchronized-和-volatile" class="headerlink" title="synchronized 和 volatile"></a>synchronized 和 volatile</h5><p>作用范围：<br>synchronized:</p><ul><li>变量、方法、类</li></ul><p>volatile：</p><ul><li>变量</li></ul><p>作用：</p><p>synchronized 可能会造成线程的阻塞会被编译器优化。<br>volatile：保证可见性，禁止指令重排序（不会被编译器优化）</p><h5 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h5><p>作用：减少资源消、提高响应速度、增加线程的管理性。</p><p>线程池创建过程：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-gold-cdn.xitu.io/2019/7/7/16bca03a5a6fd78f?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>提交一个任务，线程池里存活的核心线程数小于线程数corePoolSize时，线程池会创建一个核心线程去处理提交的任务。</li><li>如果线程池核心线程数已满，即线程数已经等于corePoolSize，一个新提交的任务，会被放进任务队列workQueue排队等待执行。</li><li>当线程池里面存活的线程数已经等于corePoolSize了,并且任务队列workQueue也满，判断线程数是否达到maximumPoolSize，即最大线程数是否已满，如果没到达，创建一个非核心线程执行提交的任务。</li><li>如果当前的线程数达到了maximumPoolSize，还有新的任务过来的话，直接采用拒绝策略处理。</li></ul><p>资料参考：<em><a href="https://juejin.im/post/5d1882b1f265da1ba84aa676" target="_blank" rel="noopener">面试必备：Java线程池解析</a></em></p><h5 id="控制线程并发数"><a href="#控制线程并发数" class="headerlink" title="控制线程并发数"></a>控制线程并发数</h5><p>可以使用信号量Semaphore</p><h5 id="synchronized-和lock对方法加锁的情况分析："><a href="#synchronized-和lock对方法加锁的情况分析：" class="headerlink" title="synchronized 和lock对方法加锁的情况分析："></a>synchronized 和lock对方法加锁的情况分析：</h5><p>如果使用lock对两个方法都加锁了的，那么同时只能有一个线程访问；<br>如果使用synchronized对两个方法都加锁了的，那么同时可以有两个线程访问，因为它们持有同一把锁；</p><h5 id="避免死锁的方法："><a href="#避免死锁的方法：" class="headerlink" title="避免死锁的方法："></a>避免死锁的方法：</h5><ul><li>按顺序进行加锁：使用join，等待另一个线程执行完才执行自己的线程</li><li>加锁时限：线程尝试获取锁的时候加上一定的时限， 超过时限则放弃对该锁的请求， 并释放自己占有的锁。例如使用：lock.tryLock(5000, TimeUnit.MILLISECONDS)</li></ul><h5 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h5><ul><li>使用共享变量，加上join做配合</li><li>使用wait/notify机制 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java多线程复习总结&quot;&gt;&lt;a href=&quot;#Java多线程复习总结&quot; class=&quot;headerlink&quot; title=&quot;Java多线程复习总结&quot;&gt;&lt;/a&gt;Java多线程复习总结&lt;/h1&gt;&lt;h3 id=&quot;1、基本概念&quot;&gt;&lt;a href=&quot;#1、基本概念&quot; cla
      
    
    </summary>
    
    
      <category term="多线程" scheme="wubc.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="Java，多线程" scheme="wubc.me/tags/Java%EF%BC%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java基础复习</title>
    <link href="wubc.me/2020/03/21/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    <id>wubc.me/2020/03/21/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-03-21T12:32:28.000Z</published>
    <updated>2020-03-21T12:34:52.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="1、基础语法"><a href="#1、基础语法" class="headerlink" title="1、基础语法"></a>1、基础语法</h3><h4 id="1、1-深拷贝和浅拷贝"><a href="#1、1-深拷贝和浅拷贝" class="headerlink" title="1、1 深拷贝和浅拷贝"></a>1、1 深拷贝和浅拷贝</h4><p>要区别是深拷贝对于对象的引用类型会创建新的对象引用，而浅拷贝直接指向同一个引用。object的clone方法是浅拷贝。</p><p>想要实现深拷贝，对象以及被引用的对象都需要实现Cloneable接口</p><h4 id="1、2-equals和hashcode"><a href="#1、2-equals和hashcode" class="headerlink" title="1、2 equals和hashcode"></a>1、2 equals和hashcode</h4><p>如果equals为true，那么hashcode一定相同，反之hashcode相等，equals不一定为true。</p><p>equals特性：自反性、传递性</p><p>重写equals方法：</p><ul><li>1、参数是否为这个对象的引用、</li><li>2、使用 instanceof 操作符检查”参数是否为正确的类型 </li><li>3、是否满足对称性、传递性、一致性 </li><li>4、重写 hashCode</li></ul><h4 id="1、3-参数传递形式"><a href="#1、3-参数传递形式" class="headerlink" title="1、3 参数传递形式"></a>1、3 参数传递形式</h4><p>Java参数传递都是值传递。<br>分析参考文章：<a href="https://juejin.im/post/5bce68226fb9a05ce46a0476#heading-12" target="_blank" rel="noopener">这一次，彻底解决Java的值传递和引用传递</a></p><h4 id="1、4-重载和重写的区别"><a href="#1、4-重载和重写的区别" class="headerlink" title="1、4 重载和重写的区别"></a>1、4 重载和重写的区别</h4><p>重载：编译时的多态性，发生在一个类中。规则：</p><ul><li>方法名一致，参数列表中参数的顺序，类型，个数不同</li><li>重载与方法的返回值无关（因编译器无法只根据返回类型来确定调用哪个方法），存在于父类和子类，同类中</li><li>可以抛出不同的异常，可以有不同修饰符</li></ul><p>重写：运行时多态，子类重写父类的方法。规则：</p><ul><li>.参数列表、返回类型与父类一致</li><li>构造方法、被final、static修饰的方法不能被重写</li><li>访问权限不能比父类的方法小</li><li>不能抛出新的强制性异常、更广泛的强制性异常</li></ul><h4 id="1、5-接口和抽象类的区别与特点"><a href="#1、5-接口和抽象类的区别与特点" class="headerlink" title="1、5 接口和抽象类的区别与特点"></a>1、5 接口和抽象类的区别与特点</h4><p>抽象类：</p><ul><li>抽象类中可以定义构造器</li><li>可以有抽象方法和具体方法 </li><li>接口中的成员全都是 public 的 </li><li>抽象类中可以定义成员变量 </li><li>有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法 </li><li>抽象类中可以包含静态方法（该静态方法不能是抽象的，因为静态方法不能被重写）</li><li>一个类只能继承一个抽象类</li></ul><p>接口类;</p><ul><li>接口中不能定义构造器 </li><li>方法全部都是抽象方法 </li><li>抽象类中的成员可以是 private、默认、protected、public</li><li>接口中定义的成员变量实际上都是常量 </li><li>接口中不能有静态方法 </li><li>一个类可以实现多个接口</li></ul><h4 id="1、6-String特性"><a href="#1、6-String特性" class="headerlink" title="1、6 String特性"></a>1、6 String特性</h4><ul><li>String是不可变的，如果进行了“+”操作，那么将产生新的对象，指向了新的对象</li><li>字符串内容相同，认为是代表同一个对象</li><li>每次通过new实例一个字符串，即使字符串内容相同，也会产生新的对象</li></ul><h3 id="2、Java异常机制"><a href="#2、Java异常机制" class="headerlink" title="2、Java异常机制"></a>2、Java异常机制</h3><h4 id="2、1-分类"><a href="#2、1-分类" class="headerlink" title="2、1 分类"></a>2、1 分类</h4><ul><li>异常exceptionError<ul><li>编译时异常：在编译时可以体现出来。用 try…catch 块或抛出该异常进行处理</li><li>运行时异常：在运行时发生的异常，常见的有下标越界等</li></ul></li><li>错误Error:一般是指与虚拟机相关的问题</li></ul><h4 id="2、2-tr…catch-finally的返回值"><a href="#2、2-tr…catch-finally的返回值" class="headerlink" title="2、2 tr…catch..finally的返回值"></a>2、2 tr…catch..finally的返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(getNum());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述打印结果是3，如果try语句块中发生了异常，那么它将进行到catch块进行处理，catch块里是一个return语句，而存在finally，所以会先执行finally里面的语句，finally语句又是一个return语句，那么该方法将会被结束，catch的返回结果不能被真正返回.</p><h4 id="2、3-throw-和-throws-的区别"><a href="#2、3-throw-和-throws-的区别" class="headerlink" title="2、3 throw 和 throws 的区别"></a>2、3 throw 和 throws 的区别</h4><p>throw:</p><ul><li>作用在方法体内，向外抛出异常实例<br>throws:</li><li>声明在方法后面，由调用者处理，抛出的某种类型的异常，抛出的异常不一定会发生</li></ul><h4 id="2、4-final、finally、finalize-的区别？"><a href="#2、4-final、finally、finalize-的区别？" class="headerlink" title="2、4 final、finally、finalize 的区别？"></a>2、4 final、finally、finalize 的区别？</h4><p>final：</p><ul><li>用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，被其修饰的类不可继承</li></ul><p>finally：</p><ul><li>异常处理语句结构的一部分，表示总是执行</li></ul><p>finalize：</p><ul><li>Object 类的一个方法，在垃圾回收器执行的时候会调用被回收对象的此方法 </li></ul><h4 id="2、5-StringBuilder-、StringBuffer-的区别"><a href="#2、5-StringBuilder-、StringBuffer-的区别" class="headerlink" title="2、5 StringBuilder 、StringBuffer 的区别"></a>2、5 StringBuilder 、StringBuffer 的区别</h4><p>StringBuilder：非同步，效率高，多线程下不安全<br>StringBuffer：同步，效率低，线程安全</p><p><strong>tips</strong>: String的“+”号操作编译为到StringBuilder的append,因此在建议在循环中不要直接使用“+”号进行连接字符串，这样会产生大量的StringBuilder对象。</p><h4 id="Java基本数据类型及范围"><a href="#Java基本数据类型及范围" class="headerlink" title="Java基本数据类型及范围"></a>Java基本数据类型及范围</h4><table><thead><tr><th>名称</th><th>字节数</th><th>范围</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>-128～127</td></tr><tr><td>short</td><td>2</td><td>-32768～32767</td></tr><tr><td>int</td><td>4</td><td>-2147483648～2147483647</td></tr><tr><td>long</td><td>8</td><td>-2^63～2^63-1</td></tr><tr><td>flot</td><td>4</td><td>-3.403E38～3.403E38</td></tr><tr><td>double</td><td>8</td><td>-1.798E308～1.798E308</td></tr><tr><td>char</td><td>2</td><td>表示一个字符</td></tr><tr><td>boolean</td><td>1</td><td>true、false</td></tr></tbody></table><h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><p>每个基本类型都有对象的包装类。</p><p><strong>note</strong>: 如果两个包装类Integer进行比较，如果比较的数值在-128 到 127 之间， 那么不会 new 新的 Integer 对象， 而是直接引用常量池中的 Integer 对象。<br>而Integer和int类型进行比较，将会自动拆箱成两个int类型比较。</p><h3 id="3、IO"><a href="#3、IO" class="headerlink" title="3、IO"></a>3、IO</h3><h4 id="3、1-流的分类："><a href="#3、1-流的分类：" class="headerlink" title="3、1 流的分类："></a>3、1 流的分类：</h4><p>从方向划分：输入流、输出流<br>从功能划分：节点流、处理流<br>从处理数据单位划分：字节流、字符流</p><h4 id="3、2-流的基本操作"><a href="#3、2-流的基本操作" class="headerlink" title="3、2 流的基本操作"></a>3、2 流的基本操作</h4><h3 id="4、集合"><a href="#4、集合" class="headerlink" title="4、集合"></a>4、集合</h3><h4 id="4、1-ArrayList的实现"><a href="#4、1-ArrayList的实现" class="headerlink" title="4、1 ArrayList的实现"></a>4、1 ArrayList的实现</h4><p>底层是使用一个Object[]数组实现的。</p><h5 id="一、构造方法分析"><a href="#一、构造方法分析" class="headerlink" title="一、构造方法分析"></a>一、构造方法分析</h5><p>1）空参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 其中private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}   //一个空数组</p></blockquote><p>2）带参构造：指定初始值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3) 带参构造：参数为一个Collection子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            <span class="title">elementData</span> </span>= Arrays.copyOf(elementData, size, Object[]<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二、add方法"><a href="#二、add方法" class="headerlink" title="二、add方法"></a>二、add方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了<strong>ensureCapacityInternal</strong>方法，让我们继续看这个方法;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算分配的容量，DEFAULT_CAPACITY这个值为10，通过Math.max方法来取得它们之间的最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>note</strong>:modCount的作用:用来记录集合的修改次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的主要作用是复制一个新的数组。首先初始新分配的容量newCapacity为原来的容量+原来容量的一般，当与minCapacity比价时，取最大的。然后再与MAX_ARRAY_SIZE进行比较，这个<em>MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8</em>  ，如果比这个值还要大，将进行下面的判断;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见newCapacity的值，最多为Integer.MAX_VALUE</p><h5 id="三、remove方法"><a href="#三、remove方法" class="headerlink" title="三、remove方法"></a>三、remove方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先检查下标是否越界，获取需要删除的值，用来做返回值，如果要删除的元素不是最后一个元素，那么数组中后面的元素整体往前移动一位。</p><h5 id="四、clear方法"><a href="#四、clear方法" class="headerlink" title="四、clear方法"></a>四、clear方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     modCount++;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// clear to let GC do its work</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">         elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     size = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>该方法实现比较简单，仅仅是将所有元素置为空了。</p><h4 id="4、2-并发集合"><a href="#4、2-并发集合" class="headerlink" title="4、2 并发集合"></a>4、2 并发集合</h4><p><strong>ConcurrentHashMap</strong> 分析：</p><p>与普通的HashMap相比，多了个concurrencyLevel属性，内部使用到了锁分段技术，Segment 数组，默认情况下有16个段。</p><p>put操作：该操作运行16个线程并发无阻塞操作集合镀锡，通过计算hash来确定Segment对象，借此对象的put方法来完成操作。</p><p>get操作：类似于put操作，也是借用Segment对象的get方法来实现的。由于Segment对象对象的数组HashEntity的数量是用volatile声明的，因此总是能正确的获取到数组的大小。而HashEntity的属性也是final，所以该链表对象不会发生改变。</p><h4 id="4、3-HashMap和HashTable"><a href="#4、3-HashMap和HashTable" class="headerlink" title="4、3 HashMap和HashTable"></a>4、3 HashMap和HashTable</h4><p>两者都实现了Map接口。<br>HashMap：</p><ul><li>非线程安全、高效、支持键值对都为null的</li></ul><p>HashTable:</p><ul><li>线程安全，不支持null值和null键</li></ul><h4 id="4、4-SortMap和TreeMap"><a href="#4、4-SortMap和TreeMap" class="headerlink" title="4、4 SortMap和TreeMap"></a>4、4 SortMap和TreeMap</h4><h4 id="4、5-ArrayList和LinkList"><a href="#4、5-ArrayList和LinkList" class="headerlink" title="4、5 ArrayList和LinkList"></a>4、5 ArrayList和LinkList</h4><p>ArrayList:</p><ul><li>访问速度快</li><li>插入慢 </li><li>开销不固定</li><li>底层是数组实现</li></ul><p>LinkList:</p><ul><li>随机访问速度较慢</li><li>插入快</li><li>底层是双向循环列表</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h1&gt;&lt;h3 id=&quot;1、基础语法&quot;&gt;&lt;a href=&quot;#1、基础语法&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="Java" scheme="wubc.me/categories/Java/"/>
    
    
      <category term="Java基础" scheme="wubc.me/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper系列教程之一（Mac下安装zookeeper）</title>
    <link href="wubc.me/2020/02/29/zookeeper%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80%EF%BC%88Mac%E4%B8%8B%E5%AE%89%E8%A3%85zookeeper%EF%BC%89/"/>
    <id>wubc.me/2020/02/29/zookeeper%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80%EF%BC%88Mac%E4%B8%8B%E5%AE%89%E8%A3%85zookeeper%EF%BC%89/</id>
    <published>2020-02-29T07:09:30.000Z</published>
    <updated>2020-03-01T13:09:40.507Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-Mac下zookeeper的安装"><a href="#一、-Mac下zookeeper的安装" class="headerlink" title="一、 Mac下zookeeper的安装"></a>一、 Mac下zookeeper的安装</h3><p>两种下载方式</p><p>第一种直接网上下载</p><p>下载地址：<br><strong><a href="https://zookeeper.apache.org/releases.html#download" target="_blank" rel="noopener">https://zookeeper.apache.org/releases.html#download</a></strong></p><p>国内的镜像地址：<br><strong><a href="https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/</a></strong></p><p>注意如果不需要源码包请下载文件名带bin的那个文件，那个是编译好的，否则运行zookeeper时会出现</p><blockquote><p>错误: 找不到或无法加载主类 org.apache.zookeeper.server.quorum.QuorumPeerMain的问题</p></blockquote><p>第二种使用homebrew下载：</p><blockquote><p>brew install zookeeper</p></blockquote><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>1、配置解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime&#x3D;2000</span><br><span class="line"># The number of ticks that the initial </span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit&#x3D;10</span><br><span class="line"># The number of ticks that can pass between </span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit&#x3D;5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use &#x2F;tmp for storage, &#x2F;tmp here is just </span><br><span class="line"># example sakes.</span><br><span class="line">dataDir&#x3D;&#x2F;tmp&#x2F;zookeeper</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort&#x3D;2181</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns&#x3D;60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the </span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http:&#x2F;&#x2F;zookeeper.apache.org&#x2F;doc&#x2F;current&#x2F;zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount&#x3D;3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval&#x3D;1</span><br><span class="line">server.1&#x3D;127.0.0.1:2888:3888</span><br></pre></td></tr></table></figure><ul><li><p>tickTime：ZK中的一个时间单元。ZK中所有时间都是以这个时间单元为基础，进行整数倍配置的。例如，session的最小超时时间是2*tickTime。</p></li><li><p>initLimit：Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。Leader允许F在initLimit时间内完成这个工作。通常情况下，我们不用太在意这个参数的设置。如果ZK集群的数据量确实很大了，F在启动的时候，从Leader上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了。(No Java system property)</p></li><li><p>syncLimit：在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。如果L发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在线了。注意：不要把这个参数设置得过大，否则可能会掩盖一些问题。(No Java system property)</p></li><li><p>dataDir：存储快照文件snapshot的目录。默认情况下，事务日志也会存储在这里。建议同时配置参数dataLogDir, 事务日志的写性能直接影响zk性能。</p></li><li><p>clientPort： 客户端连接server的端口，即对外服务端口，默认是2181。</p></li><li><p>server.x=[hostname]:nnnnn[:nnnnn]：这里的x是一个数字，与myid文件中的id是一致的。右边可以配置两个端口，第一个端口用于F和L之间的数据同步和其它通信，第二个端口用于Leader选举过程中投票通信。</p></li></ul><p>2、配置修改</p><p>单机模式：</p><p>伪集群模式</p><h3 id="三、启动与连接"><a href="#三、启动与连接" class="headerlink" title="三、启动与连接"></a>三、启动与连接</h3><ul><li><p>1、服务端启动：进入zookeeper的bin目录，在终端下执行如下命令启动</p><blockquote><p>./zkServer.sh start</p></blockquote><p>  当输出<strong>Starting zookeeper … STARTED</strong> 时表示成功了</p></li><li><p>2、客户端连接，同样在bin目录下执行命令</p><blockquote><p>./zkCli.sh</p></blockquote><p>  然后就进入到JLine控制台命令交互模式</p></li></ul><h5 id="欢迎关注公众号"><a href="#欢迎关注公众号" class="headerlink" title="欢迎关注公众号"></a>欢迎关注公众号</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wubc.oss-cn-shenzhen.aliyuncs.com/qrcode_for_gh_c47b54491983_258.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="欢迎进入京东小店，领券购物更优惠"><a href="#欢迎进入京东小店，领券购物更优惠" class="headerlink" title="欢迎进入京东小店，领券购物更优惠"></a><a href="https://store.ixiaocong.net/#/index/ZJ9VTA" target="_blank" rel="noopener">欢迎进入京东小店，领券购物更优惠</a></h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wubc.oss-cn-shenzhen.aliyuncs.com/%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9B%BE%E7%89%87_2%E6%9C%8829%E6%97%A516%E6%97%B648%E5%88%8643%E7%A7%92%20%281%29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、-Mac下zookeeper的安装&quot;&gt;&lt;a href=&quot;#一、-Mac下zookeeper的安装&quot; class=&quot;headerlink&quot; title=&quot;一、 Mac下zookeeper的安装&quot;&gt;&lt;/a&gt;一、 Mac下zookeeper的安装&lt;/h3&gt;&lt;p&gt;两种
      
    
    </summary>
    
    
      <category term="分布式" scheme="wubc.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="wubc.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="zookeeper" scheme="wubc.me/tags/zookeeper/"/>
    
  </entry>
  
</feed>
