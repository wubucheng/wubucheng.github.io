<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无编程</title>
  
  <subtitle>wubc的个人博客，公众号：后端随笔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="wubc.me/"/>
  <updated>2020-04-11T10:16:37.291Z</updated>
  <id>wubc.me/</id>
  
  <author>
    <name>wubc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring拾遗</title>
    <link href="wubc.me/2020/04/11/Spring%E6%8B%BE%E9%81%97/"/>
    <id>wubc.me/2020/04/11/Spring%E6%8B%BE%E9%81%97/</id>
    <published>2020-04-11T10:09:22.000Z</published>
    <updated>2020-04-11T10:16:37.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、spring结构"><a href="#一、spring结构" class="headerlink" title="一、spring结构"></a>一、spring结构</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.manongjc.com/images/jiaochen/spring_architecture.png" alt="spring结构" title="">                </div>                <div class="image-caption">spring结构</div>            </figure><p>主要有核心层、数据访问层、web层、以及AOP、Aspects、Instrumentation组成</p><p>核心层：</p><ul><li>Beans: 包括了控制反转、依赖注入。</li><li>core： 封装了最底层的部分，包括资源访问、类型转换等一些工具类</li><li>context: 资源绑定、数据验证、国际化、容器生命周期、事件传播等</li><li>expression language（EL）：EL表达式语言支持</li></ul><h2 id="二、工作原理"><a href="#二、工作原理" class="headerlink" title="二、工作原理"></a>二、工作原理</h2><p>先上图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/03/25/YTnGB1DvaFbjeZ2.png" alt="springMVC工作流程图.png" title="">                </div>                <div class="image-caption">springMVC工作流程图.png</div>            </figure><p><strong>说明</strong></p><ul><li><p>用户向服务器发送请求，请求被 springMVC 前端控制器 <strong>DispatchServlet</strong> 捕获；</p></li><li><p>DispatcherServle 对请求 URL 进行解析，得到请求资源标识符（URL），然后根据该 URL 调用 <strong>HandlerMapping</strong>，将请求映射到处理<strong>HandlerExcutionChain</strong>；</p></li><li><p>DispatchServlet 根据获得 Handler 选择一个合适的 HandlerAdapter 适配器处理；</p></li><li><p>HandlerAdapter 调用具体的处理器（controller）</p></li><li><p>Handler 对数据处理完成以后将返回一个 <strong>ModelAndView（）</strong> 对象给 DisPatchServlet;</p></li><li><p>Handler 返回的 ModelAndView()只是一个逻辑视图并不是一个正式的视图，DispatcherSevlet 通过<strong>ViewResolver</strong> 试图解析器将逻辑视图转化为真正的视图 View;</p></li><li><p>DispatcherServle 通过 model 解析出 ModelAndView()中的参数进行解析最终展现出完整的 view 并返回给客户端</p></li></ul><h2 id="三、注解"><a href="#三、注解" class="headerlink" title="三、注解"></a>三、注解</h2><p>xml定义会覆盖注解？</p><p>在配置文件中通过&lt;context:annotation-config /&gt;来开启注解装配</p><h2 id="四、bean的生命周期（重点）"><a href="#四、bean的生命周期（重点）" class="headerlink" title="四、bean的生命周期（重点）"></a>四、bean的生命周期（重点）</h2><p>参考文章：<a href="https://juejin.im/post/5daced865188255a270a0de6" target="_blank" rel="noopener">https://juejin.im/post/5daced865188255a270a0de6</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/05/08/5cd1d7d0416f5.jpg" alt="bean生命周期流程" title="">                </div>                <div class="image-caption">bean生命周期流程</div>            </figure><ul><li><p>Bean容器在配置文件中找到Spring Bean的定义。</p></li><li><p>Bean容器使用Java Reflection API创建Bean的实例</p></li><li><p>如果声明了任何属性，声明的属性会被设置。如果属性本身是Bean，则将对其进行解析和设置。</p></li><li><p>如果Bean类实现BeanNameAware接口，则将通过传递Bean的名称来调用setBeanName()方法。</p></li><li><p>如果Bean类实现BeanClassLoaderAware接口，则将通过传递加载此Bean的ClassLoader对象的实例来调用setBeanClassLoader()方法。</p></li><li><p>如果Bean类实现BeanFactoryAware接口，则将通过传递BeanFactory对象的实例来调用setBeanFactory()方法。</p></li><li><p>如果有任何与BeanFactory关联的BeanPostProcessors对象已加载Bean，则将在设置Bean属性之前调用postProcessBeforeInitialization()方法。</p></li><li><p>如果Bean类实现了InitializingBean接口，则在设置了配置文件中定义的所有Bean属性后，将调用afterPropertiesSet()方法。</p></li><li><p>如果配置文件中的Bean定义包含init-method属性，则该属性的值将解析为Bean类中的方法名称，并将调用该方法。</p></li><li><p>如果为Bean Factory对象附加了任何Bean 后置处理器，则将调用postProcessAfterInitialization()方法。</p></li><li><p>如果Bean类实现DisposableBean接口，则当Application不再需要Bean引用时，将调用destroy()方法。</p></li><li><p>如果配置文件中的Bean定义包含destroy-method属性，那么将调用Bean类中的相应方法定义。</p></li></ul><h2 id="五、AOP"><a href="#五、AOP" class="headerlink" title="五、AOP"></a>五、AOP</h2><p>面向切面编程。</p><ul><li>切面：通知和切点的结合</li><li>连接点：应用执行过程中能够插入切面的一个点</li><li>通知（Advice）：切面的工作被称为通知</li><li>切入点（Pointcut）：切点的定义会匹配通知所要织入的一个或多个连接点</li><li>织入（Weaving）：织入是把切面应用到目标对象并创建新的代理对象的过程</li></ul><p>关注点（concern）是应用中一个模块的行为，横切关注点（cross-cutting concern）是一个关注点，此关注点是整个应用都会使用的功能。</p><p><strong>spring只支持方法级别的连接点</strong></p><h3 id="切面Aspect"><a href="#切面Aspect" class="headerlink" title="切面Aspect"></a>切面Aspect</h3><blockquote><p>由切入点和通知组成，包含了横切逻辑、连接点定义</p></blockquote><p><strong>实现方法</strong>：</p><ul><li>基于XML Schema</li><li>基于@Aspect注解</li></ul><h3 id="spring通知类型"><a href="#spring通知类型" class="headerlink" title="spring通知类型"></a>spring通知类型</h3><ul><li>before：前置通知，在方法被调用前调用通知功能</li><li>after：后置通知，方法完成后调用通知</li><li>after-returning：在目标方法成功执行后调用通知</li><li>after-throwing：方法抛出异常后调用通知</li><li>around：目标方法调用前后都调用通知</li></ul><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ul><li>静态代理：AspectJ，编译时生成AOP代理类，将切面织入了字节码</li><li>动态代理：Spring AOP，不修改字节码，临时生成AOP对象</li></ul><h2 id="六、IOC"><a href="#六、IOC" class="headerlink" title="六、IOC"></a>六、IOC</h2><blockquote><p>将操作对象的调用权交给了容器，通过容器来实现对象组件的装配和管理。实现原理是工厂模式加反射机制</p></blockquote><p>优点：</p><ul><li>减少代码量。</li><li>使应用容易测试，单元测试不再需要单例和JNDI查找机制。</li><li>最小的代价和最小的侵入性使松散耦合得以实现</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>便于管理对象的创建和依赖关系的维护</li><li>托管了类的产生过程</li></ul><h3 id="支持的功能"><a href="#支持的功能" class="headerlink" title="支持的功能"></a>支持的功能</h3><ul><li>依赖注入</li><li>依赖检查</li><li>自动装配</li></ul><h2 id="七、BeanFactory-和-ApplicationContext区别"><a href="#七、BeanFactory-和-ApplicationContext区别" class="headerlink" title="七、BeanFactory 和 ApplicationContext区别"></a>七、BeanFactory 和 ApplicationContext区别</h2><p>ApplicationContext是BeanFactory的子接口</p><p>与BeanFactory相比较，ApplicationContext增加了一下功能：</p><ul><li>继承MessageSource，因此支持国际化。</li><li>统一的资源文件访问方式。</li><li>提供在监听器中注册bean的事件。</li><li>支持同时加载多个配置文件。</li><li>载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层</li></ul><p>BeanFactory是使用延迟加载来注入bean,因此如果没有调用getBean将可能不会发现异常。而ApplicationContext一次性创建了所有的bean。BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader。</p><h2 id="八、依赖注入"><a href="#八、依赖注入" class="headerlink" title="八、依赖注入"></a>八、依赖注入</h2><blockquote><p>组件之间的依赖关系有容器在应用系统运行期决定，由容器动态地将某种依赖关系的目标对象实例注入到应用系统中的各个关联的组件之中。</p></blockquote><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>应用组件不应该负责查找资源或者其他依赖的协作对象，容器全权负责组件的装配</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>查找定位操作与应用代码无关，交由容器管理</li><li>不依赖容器API，可以在容器外使用应用对象</li></ul><h3 id="实现方式-1"><a href="#实现方式-1" class="headerlink" title="实现方式"></a>实现方式</h3><ul><li><del>接口注入</del>,spring4已弃用</li><li>构造器注入</li><li>setter方法注入</li></ul><h2 id="九、SpringBean"><a href="#九、SpringBean" class="headerlink" title="九、SpringBean"></a>九、SpringBean</h2><p>bean定义包含配置元数据、生命周期详情、依赖</p><h3 id="配置元数据"><a href="#配置元数据" class="headerlink" title="配置元数据"></a>配置元数据</h3><ul><li>XML配置文件</li><li>注解配置</li><li>基于Java的配置</li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li>singleton：每个bean在容器中只存在一个实例</li><li>prototype：有多个实例</li><li>request: 每次请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。</li><li>session：每一个session中，一个bean对应一个实例，该作用域仅在基于web的Spring ApplicationContext情形下有效。</li><li>global-session：以session相比，这是一个全局的</li></ul><h3 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>singleton不是线程安全的，prototype可以保证线程安全；如果bean是无状态的，bean也是安全的。</p><p>ps: 无状态: 由于没有特定的用户，那么也就不能保持某一用户的状态，所以叫无状态bean</p><p><strong>多线程下处理并发问题</strong></p><ul><li>ThreadLocal：每个线程都拥有自己变量副本</li><li>线程同步机制：只有一份变量，每个线程访问前需要获取锁</li></ul><h3 id="生命周期重要的方法"><a href="#生命周期重要的方法" class="headerlink" title="生命周期重要的方法"></a>生命周期重要的方法</h3><ul><li>setUp：在容器加载bean时被调用</li><li>teardown： 在容器写在类的时候被调用</li></ul><h2 id="十、自动装配"><a href="#十、自动装配" class="headerlink" title="十、自动装配"></a>十、自动装配</h2><blockquote><p>Spring通过BeanFactory中注入的方式自动处理bean之间的依赖关系</p></blockquote><h4 id="自动装配的方式"><a href="#自动装配的方式" class="headerlink" title="自动装配的方式"></a>自动装配的方式</h4><ul><li>no: 默认的方式，不进行自动装配，通过手动ref来装配bean</li><li>byType：通过参数的数据类型进行自动装配</li><li>byName: 通过bean的名称进行自动装配</li><li>constructor: 通过构造函数进行装配</li><li>audodetect: 自动探测，优先使用construct，否则使用byType</li></ul><p>spring还用到 <strong>@Autowired</strong> 的注解方式进行自动装配，使用前需在配置文件中配置 <strong>&lt;context:annotation-config /&gt;</strong><br>属性。<br>它的原理是：利用AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到用@Autowired注解修饰的bean时，会在容器中查询是否有这个bean，有且只有一个那么将会返回，而有多个，则会通过名称去查找，查询不到则抛出异常。</p><h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><ul><li>重写：<em>使用配置定义依赖，则需重写自动装配？</em></li><li>不能自动装配基本类型</li><li>模糊：不如显示装配精确</li></ul><h2 id="十一、Spring数据访问"><a href="#十一、Spring数据访问" class="headerlink" title="十一、Spring数据访问"></a>十一、Spring数据访问</h2><h3 id="spring-dao的作用"><a href="#spring-dao的作用" class="headerlink" title="spring dao的作用"></a>spring dao的作用</h3><blockquote><p>使jdbc等数据访问即使更容易以一种统一的方式工作</p></blockquote><h3 id="jdbc-template"><a href="#jdbc-template" class="headerlink" title="jdbc template"></a>jdbc template</h3><blockquote><p>提供便利的方法将数据库数据转换为基本数据类型和对象、执行数据库操作语句、提供数据错误处理等</p></blockquote><h3 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h3><h4 id="实现方式类型："><a href="#实现方式类型：" class="headerlink" title="实现方式类型："></a>实现方式类型：</h4><ul><li>编程式i：开发人员通过编程的方式进行事务的管理，灵活但是难维护</li><li>声明式：通过注解和XML配置来管理事务，将业务代码是事务管理放分离</li></ul><h4 id="事务传播行为："><a href="#事务传播行为：" class="headerlink" title="事务传播行为："></a>事务传播行为：</h4><ul><li>PROPAGATION_REQUIRED:存在事务则加入，否则创建一个新的事务</li><li>PROPAGATION_SUPPORT:  存在事务则加入，否则以非事务执行</li><li>PROPAGATION_MANDATORY:存在事务则加入，否则抛出异常</li><li>PROPAGATION_REQUIRES_NEW: 无论当前是否存在事务，都创建事务</li><li>PROPAGATION_NEVER: 以非事务方式执行，当前存在事务则抛出异常</li><li>PROPAGATION_NESTED: 当前存在事务，则在嵌套事务中执行，没有则按REQUIRED属性执行</li></ul><h4 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h4><ul><li>ISOLATION_DEFAULT: 默认，使用数据库隔离机制</li><li>ISOLATION_READ_UNCOMMITTED: 未提交读，事务未提交前就可以被其他事务读取，会出现幻读、脏读、不可重复读问题</li><li>ISOLATION_READ_COMMIT:一个事务被提交后才能被其他事务读取，会出现幻读、不可重复读</li><li>ISOLATION_REPEATABLE_READ:可重复读，多次读取同一个数据都是一致的</li><li>ISOLATION_SERIALIABLE:序列化，隔离级别最高，可防止上面出现的问题</li></ul><p>ps: <strong>脏读、不可重复读、幻读的概念</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、spring结构&quot;&gt;&lt;a href=&quot;#一、spring结构&quot; class=&quot;headerlink&quot; title=&quot;一、spring结构&quot;&gt;&lt;/a&gt;一、spring结构&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
           
      
    
    </summary>
    
    
      <category term="Spring" scheme="wubc.me/categories/Spring/"/>
    
    
      <category term="Spring" scheme="wubc.me/tags/Spring/"/>
    
      <category term="知识总结" scheme="wubc.me/tags/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Redis知识总结</title>
    <link href="wubc.me/2020/04/07/Redis%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>wubc.me/2020/04/07/Redis%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-04-07T15:15:45.000Z</published>
    <updated>2020-04-08T13:11:34.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1176412373,2457025458&fm=26&gp=0.jpg" alt="数据类型" title="">                </div>                <div class="image-caption">数据类型</div>            </figure><h3 id="1-1-字符串"><a href="#1-1-字符串" class="headerlink" title="1.1 字符串"></a>1.1 字符串</h3><p>命令：</p><ul><li>setnx命令：键必须不存在，才可以设置成功。可作为分布式锁的一种实现方案</li></ul><p>命令实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set hello world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line">&quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>时间复杂度:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/01/wIhoX9ZbqLQln3z.png" alt="时间复杂度" title="">                </div>                <div class="image-caption">时间复杂度</div>            </figure><p>内部编码有三种情况：</p><ul><li>int： 8个字节的长整型</li><li>embstr: 小于39个字节的字符串</li><li>raw: 大于39个字节的字符串</li></ul><p>使用场景：</p><ul><li>缓存</li><li>计数</li><li>共享session</li><li>限速</li></ul><h3 id="1-2-hash"><a href="#1-2-hash" class="headerlink" title="1.2 hash"></a>1.2 hash</h3><p>命令：</p><ul><li>hset、hget</li><li>hexists</li><li>hkeys、hvals</li><li>hincrby</li></ul><p>命令实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset dev name &quot;devtool&quot; desc &quot;haha&quot; likes good</span><br><span class="line">127.0.0.1:6379&gt; hgetall dev</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;devtool&quot;</span><br><span class="line">3) &quot;desc&quot;</span><br><span class="line">4) &quot;haha&quot;</span><br><span class="line">5) &quot;likes&quot;</span><br><span class="line">6) &quot;good&quot;</span><br></pre></td></tr></table></figure><p>时间复杂度：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/01/VR3YtajseSTpOX9.png" alt="hash时间复杂度" title="">                </div>                <div class="image-caption">hash时间复杂度</div>            </figure><p>内部编码：</p><ul><li>ziplist 压缩列表，元素个数小于hash-max-ziplist-entries配置（默认512个）使用</li><li>hashtable,当value大于64个字节或field个数大于512，编码有ziplist变为hashtable</li></ul><p>使用场景：</p><ul><li>保存对象属性</li></ul><h3 id="1-3-列表"><a href="#1-3-列表" class="headerlink" title="1.3 列表"></a>1.3 列表</h3><blockquote><p>一个列表最多可以存储232 -1个元素，可重复</p></blockquote><p>命令：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/07/OrA1I8CVLDXBltY.png" alt="命令" title="">                </div>                <div class="image-caption">命令</div>            </figure><p>命令实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush hello world</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush hello nice</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush hello with</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lpush hello you</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange hello 0 10</span><br><span class="line">1) &quot;you&quot;</span><br><span class="line">2) &quot;with&quot;</span><br><span class="line">3) &quot;nice&quot;</span><br><span class="line">4) &quot;world&quot;</span><br></pre></td></tr></table></figure><p>br命令不会阻塞导致后面的命令的不执行吗？</p><p>时间复杂度：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/01/KIto5RLaOpbJTEn.png" alt="时间复杂度" title="">                </div>                <div class="image-caption">时间复杂度</div>            </figure><p>内部编码：</p><ul><li>ziplist</li><li>linkedlist</li><li>quicklist</li></ul><p>使用场景：</p><ul><li>消息队列</li><li>文章列表</li><li>组成队列、栈等<ul><li>lpush+lpop=Stack（栈）</li><li>lpush+rpop=Queue（队列）</li><li>lpsh+ltrim=Capped Collection（有限集合）</li><li>lpush+brpop=Message Queue（消息队列）</li></ul></li></ul><h3 id="1-4-集合"><a href="#1-4-集合" class="headerlink" title="1.4 集合"></a>1.4 集合</h3><p>常用命令：</p><ul><li>zadd</li><li>srem</li><li>scard</li><li>spop</li><li>smembers</li><li>sinter 交集</li><li>sunion 并集   </li><li>sdiff 差集</li></ul><p>命令实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd fruit apple</span><br><span class="line">127.0.0.1:6379&gt; sadd fruit orange</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS fruit</span><br><span class="line">1) &quot;orange&quot;</span><br><span class="line">2) &quot;apple&quot;</span><br></pre></td></tr></table></figure><p>内部编码</p><ul><li>intset（整数集合）：当集合中的元素都是整数且元素个数小于set-max-intset-entries配置（默认512个）时使用</li><li>hahstable</li></ul><p>使用场景：</p><ul><li>标签</li><li>随机数</li><li>社交需求</li></ul><h4 id="1-5-有序集合"><a href="#1-5-有序集合" class="headerlink" title="1.5 有序集合"></a>1.5 有序集合</h4><p>命令实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd language 1 java</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd language 2 php</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd language 3 python</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd language 4 c</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE language 0 10 withscores</span><br><span class="line">1) &quot;java&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;php&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;python&quot;</span><br><span class="line">6) &quot;3&quot;</span><br><span class="line">7) &quot;c&quot;</span><br></pre></td></tr></table></figure><h3 id="1-6-数据机构对应的内部编码"><a href="#1-6-数据机构对应的内部编码" class="headerlink" title="1.6 数据机构对应的内部编码"></a>1.6 数据机构对应的内部编码</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/01/X84EPMnzSYh3c5q.png" alt="内部编码" title="">                </div>                <div class="image-caption">内部编码</div>            </figure><h2 id="二、Redis单线程模型"><a href="#二、Redis单线程模型" class="headerlink" title="二、Redis单线程模型"></a>二、Redis单线程模型</h2><blockquote><p>Redis基于Reactor模式开发了网络事件处理器，这个处理器被称为文件事件处理器（file event handler）。它的组成结构为4部分：多个套接字、IO多路复用程序、文件事件分派器、事件处理器。因为文件事件分派器队列的消费是单线程的，所以Redis才叫单线程模型。</p></blockquote><p>速度快的原因：</p><ul><li>内存访问</li><li>NIO。使用epoll作为IO多路复用技术的实现</li><li>单线程避免了线程切换和竞态产生的消耗</li></ul><h2 id="三、Redis其他功能"><a href="#三、Redis其他功能" class="headerlink" title="三、Redis其他功能"></a>三、Redis其他功能</h2><h3 id="3-1-bitmap"><a href="#3-1-bitmap" class="headerlink" title="3.1 bitmap"></a>3.1 bitmap</h3><p>命令： </p><ul><li>setbit key offset value 设置值</li><li>gitbit key offset 获取值</li><li>bitcount [start][end] 获取指定范围的个数</li><li>bitop op destkey key[key….] op可以为and（交集）、or（并集）、not（非）、xor（异或）</li></ul><h3 id="3-2-HyperLogLog"><a href="#3-2-HyperLogLog" class="headerlink" title="3.2 HyperLogLog"></a>3.2 HyperLogLog</h3><h3 id="3-3-发布订阅"><a href="#3-3-发布订阅" class="headerlink" title="3.3 发布订阅"></a>3.3 发布订阅</h3><p>命令：</p><ul><li>publish channel message 发布消息</li><li>subscribe channel [channel …] 订阅消息</li><li>unsubscribe [channel [channel …]] 取消订阅</li><li>pubsub channels [pattern] 查看活跃的频道</li><li>pubsub numsub [channel …] 查询频道数</li></ul><h3 id="3-4-GEO-地理信息定位"><a href="#3-4-GEO-地理信息定位" class="headerlink" title="3.4 GEO 地理信息定位"></a>3.4 GEO 地理信息定位</h3><p>用来实现基于地理位置信息的应用,例如查找附近的人</p><h3 id="3-5-事务"><a href="#3-5-事务" class="headerlink" title="3.5 事务"></a>3.5 事务</h3><blockquote><p>Redis提供了简单的事务功能，将一组需要一起执行的命令放到multi和exec两个命令之间。</p></blockquote><p><strong>redis事务的特点</strong>：</p><ul><li>redis 不支持回滚，事务失败时不进行回滚，而是继续执行余下的命令。</li><li>如果在一个事务中的命令出现错误，那么所有的命令都不会执行；</li><li>如果在一个事务中出现运行错误，那么正确的命令会被执行。</li></ul><p>事务的三个阶段：</p><ul><li>事务开始 MULTI</li><li>命令入队</li><li>事务执行 EXEC</li></ul><h2 id="四、Redis客户端"><a href="#四、Redis客户端" class="headerlink" title="四、Redis客户端"></a>四、Redis客户端</h2><blockquote><p>Redisson、Jedis、lettuce等等，官方推荐使用Redisson</p></blockquote><p>RESP格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*&lt;参数数量</span><br><span class="line">&gt; CRLF</span><br><span class="line">$&lt;参数1的字节数量</span><br><span class="line">&gt; CRLF</span><br><span class="line">&lt;参数1</span><br><span class="line">&gt; CRLF</span><br><span class="line">...</span><br><span class="line">$&lt;参数N的字节数量</span><br><span class="line">&gt; CRLF</span><br><span class="line">&lt;参数N</span><br><span class="line">&gt; CRLF</span><br></pre></td></tr></table></figure><h3 id="4-1-java-客户端jedis"><a href="#4-1-java-客户端jedis" class="headerlink" title="4.1 java 客户端jedis"></a>4.1 java 客户端jedis</h3><p>与Redission相比，jedis支持排序、事务、管道、分区等Redis特性。</p><p>主要要熟悉其api和jedis连接池的使用</p><ul><li>jedis 基本使用</li><li>jedis 使用pipeline</li><li>jedis 使用lua</li><li>jedis poll Jedis对象个数是有限的，默认是8个</li></ul><h3 id="4-2-Redis客户端API"><a href="#4-2-Redis客户端API" class="headerlink" title="4.2 Redis客户端API"></a>4.2 Redis客户端API</h3><p>命令</p><ul><li>client list 列出与Redis服务端相连的所有客户端连接信息</li><li>info clients 列出缓冲区信息<br>两者相比较<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/02/wENJBh7mWU5GZqu.png" alt="两种命令的比较" title="">                </div>                <div class="image-caption">两种命令的比较</div>            </figure></li></ul><h3 id="4-3-缓冲区"><a href="#4-3-缓冲区" class="headerlink" title="4.3 缓冲区"></a>4.3 缓冲区</h3><p>输入缓冲区：</p><ul><li>qbuf：缓冲区总容量</li><li>qbuf-free: 剩余容量</li></ul><p>输出缓冲区：</p><ul><li>obl： 固定缓冲区的长度</li><li>oll： 动态缓冲区列表的长度</li><li>omem： 使用的字节数</li></ul><p>输出缓冲区有三种客户端：普通客户端、发布订阅客户端、slave客户端</p><h3 id="4-4-常见异常及产生原因："><a href="#4-4-常见异常及产生原因：" class="headerlink" title="4.4 常见异常及产生原因："></a>4.4 常见异常及产生原因：</h3><ul><li>无法从连接池获取到连接</li><li>客户端读写超时</li><li>客户端连接超时</li><li>客户端缓冲区异常</li><li>Lua脚本正在执行</li><li>Redis正在加载持久化文件</li><li>Redis使用的内存超过maxmemory配置</li><li>客户端连接数过大</li></ul><h2 id="五、持久化"><a href="#五、持久化" class="headerlink" title="五、持久化"></a>五、持久化</h2><p>两种持久化方式：<br>RDB、AOF</p><h3 id="5-1-RDB"><a href="#5-1-RDB" class="headerlink" title="5.1 RDB"></a>5.1 RDB</h3><blockquote><p><strong>RDB</strong>：<br>间隔时间生成数据集快照。适用于灾难恢复，只有一个文件，恢复速度快。父进程通过fork一个子线程来进行保存RDB的工作。由于生成RDB文件不是实时的，因此如果遇到故障，可能会丢失数据，使用fork创建子线程，频繁执行成本高，存在RDB文件格式兼容性问题。</p></blockquote><p>触发RDB持久化过程分为手动触发和自动触发。<br>手动触发命令：</p><ul><li>save</li><li>bgsave</li></ul><p>自动触发：</p><ul><li>使用save相关配置</li><li>从节点执行全量复制操作</li></ul><h3 id="5-2-AOF"><a href="#5-2-AOF" class="headerlink" title="5.2 AOF"></a>5.2 AOF</h3><blockquote><p><strong>AOF</strong>：<br>通过文件追加命令的方式生成AOF文件，AOF是以Redis协议格式保存的，新的命令会被追加到文件末尾。AOF可以通过设置fsync策略来决定什么时候写，默认为每秒钟 fsync 一次。与RDB相比较，AOF速度较慢、文件体积较大。</p></blockquote><p>AOF工作流程</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/07/6MSofA2hqnGCNZb.png" alt="6MSofA2hqnGCNZb" title="">                </div>                <div class="image-caption">6MSofA2hqnGCNZb</div>            </figure><h4 id="5-2-1-命令写入"><a href="#5-2-1-命令写入" class="headerlink" title="5.2.1 命令写入"></a>5.2.1 命令写入</h4><p>所有的写入命令会追加到aof_buf（缓冲区）中。<br>直接追加文本，写入到缓冲区有个好处是Redis可以提供多种缓冲区同步硬盘的策略，在性能和安全性方面做出平衡。</p><h4 id="5-2-2-文件同步"><a href="#5-2-2-文件同步" class="headerlink" title="5.2.2 文件同步"></a>5.2.2 文件同步</h4><p>AOF缓冲区根据对应的策略向硬盘做同步操作。<br>文件同步策略：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/04/6atIAc9LqDZRFOd.png" alt="6atIAc9LqDZRFOd" title="">                </div>                <div class="image-caption">6atIAc9LqDZRFOd</div>            </figure><ul><li>write操作会触发延迟写机制,同步硬盘操作依赖于系统调度机制.</li><li>fsync针对单个文件操作（比如AOF文件），做强制硬盘同步，fsync将阻塞直到写入硬盘完成后返回，保证了数据持久化.</li></ul><h4 id="5-2-3-文件重写"><a href="#5-2-3-文件重写" class="headerlink" title="5.2.3 文件重写"></a>5.2.3 文件重写</h4><p>随着AOF文件越来越大，需要定期对AOF文件进行重写，达到压缩的目的。<br>重写文件可以使其变小，主要是因为：超时、无效命令不再写入、多条命令可以合并成一条。</p><p>AOP文件的重写机制分为手动和主动触发两种方式：</p><ul><li>手动触发 ：直接调用bgrewriteaof命令。</li><li>自动触发 ：根据auto-aof-rewrite-min-size和auto-aof-rewrite-percentage参数确定自动触发时机<ul><li>auto-aof-rewrite-min-size：表示运行AOF重写时文件最小体积，默认为64MB。</li></ul></li></ul><p>重写过程：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/05/rMO1RiY2tU87laA.png" alt="rMO1RiY2tU87laA" title="">                </div>                <div class="image-caption">rMO1RiY2tU87laA</div>            </figure><p>1、执行AOF重写请求<br>2、fork子线程<br>3、响应其他命令，并且将期间的命令写入到AOF缓冲区<br>4、写入到新AOF文件<br>5、子线程发送信号给父进程<br>6、将AOF重写缓冲区写入到新的AOF文件<br>7、替换旧AOF文件，完成重写</p><p>4）当Redis服务器重启时，可以加载AOF文件进行数据恢复。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/05/UVkiPLCsbJ9ofDQ.png" alt="UVkiPLCsbJ9ofDQ" title="">                </div>                <div class="image-caption">UVkiPLCsbJ9ofDQ</div>            </figure><h2 id="六、性能问题与解决"><a href="#六、性能问题与解决" class="headerlink" title="六、性能问题与解决"></a>六、性能问题与解决</h2><ul><li>master不要做持久化工作，例如存快照和AOF日志文件</li><li>Master 调用 BGREWRITEAOF 重写 AOF 文件，占大量的 CPU 和内存资源，导致服务 load 过高，出现短暂服务暂停现象</li><li>为了主从复制的速度和连接的稳定性，Slave 和 Master 最好在同一个局域网内</li><li>如果部署多个Redis实例，尽量保证同一时刻只有一个子进程在工作</li><li>避免在大量写入时做子进程重写操作，这样将导致父进程维护大量页副本，造成内存消耗</li><li>不要和其他CPU密集型服务部署在一起，造成CPU过度竞争</li><li>不要和其他高硬盘负载的服务部署在一起</li><li>开启配置no-appendfsync-on-rewrite，表示在AOF重写期间不做fsync操作。</li></ul><h2 id="七、复制"><a href="#七、复制" class="headerlink" title="七、复制"></a>七、复制</h2><blockquote><p>在分布式系统中为了解决单点问题，通常会把数据复制多个副本部署到其他机器，满足故障恢复和负载均衡等需求</p></blockquote><p>复制的数据流是单向的，只能由主节点复制到从节点。</p><p>复制过程：</p><ul><li>保存主节点（master）信息</li><li>主从建立socket连接</li><li>发送ping命令</li><li>权限验证</li><li>同步数据集： 同步过程分为：全量复制和部分复制</li><li>命令持续复制</li></ul><h2 id="八、阻塞"><a href="#八、阻塞" class="headerlink" title="八、阻塞"></a>八、阻塞</h2><p>内在原因：</p><ul><li>API或数据结构使用不合理</li><li>CPU饱和</li><li>持久化阻塞</li></ul><p>外在原因：</p><ul><li>CPU竞争： 进程竞争、绑定CPU（对于开启了持久化或参与复制的主节点不建议绑定CPU）</li><li>内存交换</li><li>网络问题</li></ul><h2 id="九、内存"><a href="#九、内存" class="headerlink" title="九、内存"></a>九、内存</h2><h3 id="9-1-内存消耗"><a href="#9-1-内存消耗" class="headerlink" title="9.1 内存消耗"></a>9.1 内存消耗</h3><p>内存消耗可以分为进程自身消耗和子进程消耗<br>info memory命令获取内存相关指标。</p><p>Redis进程内消耗主要包括：自身内存+对象内存+缓冲内存+内存碎片</p><p>子进程内存消耗</p><blockquote><p>子进程内存消耗主要指执行AOF/RDB重写时Redis创建的子进程内存消耗</p></blockquote><h3 id="9-2-内存管理"><a href="#9-2-内存管理" class="headerlink" title="9.2 内存管理"></a>9.2 内存管理</h3><p>使用maxmemory参数限制最大可用内存，通过config set maxmemory进行动态修改内存上限</p><h3 id="9-3-内存回收策略"><a href="#9-3-内存回收策略" class="headerlink" title="9.3 内存回收策略"></a>9.3 内存回收策略</h3><ul><li>删除过期键对象<ul><li>惰性删除：当访问key时才判断是否过期，存在问题是可能存在大量没有被访问的过期的key</li><li>定时任务删除</li><li>定期过期：每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。</li></ul></li></ul><ul><li>内存溢出控制策略<ul><li>noeviction：默认策略，不会删除任何数据，拒绝所有写入操作并返回客户端错误信息。</li><li>volatile-lru：根据LRU算法删除设置了超时属性的键</li><li>allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性</li><li>allkeys-random：随机删除所有键</li><li>volatile-random：随机删除过期键</li><li>volatile-ttl：根据键值对象的ttl属性，删除<em>最近将要过期数据</em></li></ul></li></ul><h3 id="9-4-内存优化"><a href="#9-4-内存优化" class="headerlink" title="9.4 内存优化"></a>9.4 内存优化</h3><p>内存优化几个点：</p><ul><li>缩减键值对象：key尽量使用简写，value可以进行压缩序列化</li><li>尽量使用整数对象以节省内存。注意：使用了LRU淘汰策略会使对象池无效，原因在于LRU字段被共享了，无法获取最后的访问时间。</li><li>尽量减少字符串频繁修改操作如append、setrange，改为直接使用set修改字符串，降低预分配带来的内存浪费和内存碎片化。</li><li>不一定把每份数据作为字符串整体存储，可以使用其他数据结构</li><li>编码优化：例如使用ziplist编码类型可以大幅降低内存占用、整数集合时尽量使用intset编码且使用intset编码的集合时，尽量保持整数范围一致</li><li>减少键的个数</li></ul><h2 id="十、缓存设计"><a href="#十、缓存设计" class="headerlink" title="十、缓存设计"></a>十、缓存设计</h2><h3 id="10-1-缓存更新策略"><a href="#10-1-缓存更新策略" class="headerlink" title="10.1 缓存更新策略"></a>10.1 缓存更新策略</h3><ul><li>LRU/LFU/FIFO算法剔除：</li><li>超时剔除：</li><li>主动更新</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/07/cFlaswjIQX1oG4L.png" alt="cFlaswjIQX1oG4L" title="">                </div>                <div class="image-caption">cFlaswjIQX1oG4L</div>            </figure><h3 id="10-2-缓存粒度控制"><a href="#10-2-缓存粒度控制" class="headerlink" title="10.2 缓存粒度控制"></a>10.2 缓存粒度控制</h3><p>缓存全部属性、只缓存部分重要属性</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/07/3YWrpLs7ocXRFOl.png" alt="缓存粒度对比" title="">                </div>                <div class="image-caption">缓存粒度对比</div>            </figure><h3 id="10-3-缓存穿透"><a href="#10-3-缓存穿透" class="headerlink" title="10.3 缓存穿透"></a>10.3 缓存穿透</h3><blockquote><p>指查询一个根本不存在的数据，缓存层和存储层都不会命中</p></blockquote><p>由于缓存层不存在的数据，导致每次请求都要到存储层去查询，增加了后端存储的负载。</p><p><strong>优化方法</strong><br>1、缓存空对象：存储不命中后，将空对象作为值保存在缓存层中，可以设置一个较短的过期时间来防止大量的键占用空间。<br>2、布隆过滤器拦截：将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉。</p><blockquote><p>布隆过滤器</p></blockquote><h3 id="10-4-无底洞优化"><a href="#10-4-无底洞优化" class="headerlink" title="10.4 无底洞优化"></a>10.4 无底洞优化</h3><blockquote><p>无底洞:投入越多不一定产出越多，即节点越多效率更加慢的现象</p></blockquote><p>主要是减少网络操作次数：</p><ul><li>串行命令，逐次执行n个get命令</li><li>串行IO：将属于同一个节点的key进行归档</li><li>并行IO：将串行IO改为多线程执行</li><li>hash_tag实现：hash_tag可以将多个key强制分配到一个节点上</li></ul><p>几种优化方案对比：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/07/phRo7TJqNLacb6Q.png" alt="phRo7TJqNLacb6Q" title="">                </div>                <div class="image-caption">phRo7TJqNLacb6Q</div>            </figure><h3 id="10-5-雪崩优化"><a href="#10-5-雪崩优化" class="headerlink" title="10.5 雪崩优化"></a>10.5 雪崩优化</h3><blockquote><p>雪崩: 如果缓存层由于某些原因不能提供服务，于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会级联宕机的情况。</p></blockquote><p>优化：</p><ul><li>保证缓存层服务高可用性</li><li>依赖隔离组件为后端限流并降级：例如可以使用hystrix</li><li>提前演练</li></ul><h3 id="10-5-热点key重建优化"><a href="#10-5-热点key重建优化" class="headerlink" title="10.5 热点key重建优化"></a>10.5 热点key重建优化</h3><p>主要是要减少重建缓存的次数。</p><ul><li>互斥锁</li><li>永不过期<ul><li>从缓存层面来看，确实没有设置过期时间</li><li>从功能层面来看，为每个value设置一个逻辑过期时间，过期是利用单线程去构建缓存</li></ul></li></ul><p><img src="https://i.loli.net/2020/04/07/abUO3pxQo1dE8tc.png" alt="abUO3pxQo1dE8tc"></p><h3 id="10-6-缓存击穿"><a href="#10-6-缓存击穿" class="headerlink" title="10.6 缓存击穿"></a>10.6 缓存击穿</h3><blockquote><p>缓存中没有数据但是数据库有，导致去数据库取数据，数据库压力增大，与缓存雪崩的区别是缓存穿透一般指查询同一条数据。</p></blockquote><p>优化方案：</p><ul><li>设置热点数据永不过期</li><li>设置互斥锁</li></ul><h4 id="10-7-小结"><a href="#10-7-小结" class="headerlink" title="10.7 小结"></a>10.7 小结</h4><blockquote><p>前面几种情况都有用到互斥锁，原理是，但key不存在的时候，加锁，再从数据库中查询，并将查询结果加入缓存，然后释放锁。而在这过程中其他进程发现有锁则会等待，这样子防止了大量的请求都往数据库查询了。</p></blockquote><h2 id="十一、哨兵"><a href="#十一、哨兵" class="headerlink" title="十一、哨兵"></a>十一、哨兵</h2><h3 id="11-1-主要功能"><a href="#11-1-主要功能" class="headerlink" title="11.1 主要功能"></a>11.1 主要功能</h3><ul><li>集群监控：负责监控 redis master 和 slave 进程是否正常工作。</li><li>消息通知：如果某个 redis 实例有故障，那么哨兵负责发送消息作为报警通知给管理员。</li><li>故障转移：如果 master node 挂掉了，会自动转移到 slave node 上。</li><li>配置中心：如果故障转移发生了，通知 client 客户端新的 master 地址。</li></ul><h2 id="十二、集群"><a href="#十二、集群" class="headerlink" title="十二、集群"></a>十二、集群</h2><h3 id="分布式方案"><a href="#分布式方案" class="headerlink" title="分布式方案"></a>分布式方案</h3><h4 id="基于客户端分配"><a href="#基于客户端分配" class="headerlink" title="基于客户端分配"></a>基于客户端分配</h4><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><h2 id="十三、分区"><a href="#十三、分区" class="headerlink" title="十三、分区"></a>十三、分区</h2><p>分类：</p><ul><li>客户端分区</li><li>代理分区</li><li>查询路由</li></ul><h2 id="十四、Redis实现分布式锁"><a href="#十四、Redis实现分布式锁" class="headerlink" title="十四、Redis实现分布式锁"></a>十四、Redis实现分布式锁</h2><ul><li>使用SETNX命令</li><li>使用redlock<ul><li>安全特性：互斥访问，即永远只有一个 client 能拿到锁</li><li>死锁：最终 client 都可能拿到锁，不会出现死锁的情况</li><li>容错性：只要大部分 Redis 节点存活就可以正常提供服务</li></ul></li></ul><h2 id="十五、数据一致性解决方案"><a href="#十五、数据一致性解决方案" class="headerlink" title="十五、数据一致性解决方案"></a>十五、数据一致性解决方案</h2><table><thead><tr><th>问题场景</th><th>描述</th><th>解决</th></tr></thead><tbody><tr><td>先写缓存，再写数据库，缓存写成功，数据库写失败</td><td>缓存写成功，但写数据库失败或者响应延迟，则下次读取（并发读）缓存时，就出现脏读</td><td>需要改为先写数据库，把旧缓存置为失效；读取数据的时候，如果缓存不存在，则读取数据库再写缓存</td></tr><tr><td>先写数据库，再写缓存，数据库写成功，缓存写失败</td><td>写数据库成功，但写缓存失败，则下次读取（并发读）缓存时，则读不到数据</td><td>缓存使用时，假如读缓存失败，先读数据库，再回写缓存的方式实现</td></tr><tr><td>需要缓存异步刷新</td><td>指数据库操作和写缓存不在一个操作步骤中，比如在分布式场景下，无法做到同时写缓存或需要异步刷新（补救措施）时候</td><td>确定哪些数据适合此类场景，根据经验值确定合理的数据不一致时间，用户数据刷新的时间间隔</td></tr></tbody></table><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>《Redis开发与运维》<ul><li><a href="https://blog.csdn.net/ThinkWon/article/details/103522351" target="_blank" rel="noopener">redis面试题</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;h2 id=&quot;一、数据类型&quot;&gt;&lt;a href=&quot;#一、数据类型&quot; class=&quot;headerlink&quot; title=&quot;一
      
    
    </summary>
    
    
      <category term="Redis" scheme="wubc.me/categories/Redis/"/>
    
    
      <category term="Redis" scheme="wubc.me/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式总结</title>
    <link href="wubc.me/2020/03/22/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>wubc.me/2020/03/22/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</id>
    <published>2020-03-22T08:32:08.000Z</published>
    <updated>2020-03-22T08:35:08.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式总结"><a href="#设计模式总结" class="headerlink" title="设计模式总结"></a>设计模式总结</h1><blockquote><p>本篇文章不对每一个设计模式进行细讲，只对常见的设计模式展开。</p></blockquote><h2 id="一、分类："><a href="#一、分类：" class="headerlink" title="一、分类："></a>一、分类：</h2><ul><li>创建型模式：<strong>工厂方法模式、抽象工厂模式</strong>、<strong>单例、建造者</strong>、原型模式</li><li>结构型模式：<strong>适配器、装饰器</strong>、代理、外观、桥接、组合、享元模式</li><li>行为型模式：<strong>策略模式</strong>、模板方法模式、<strong>观察者模式</strong>、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</li></ul><h2 id="二、创建型模式"><a href="#二、创建型模式" class="headerlink" title="二、创建型模式"></a>二、创建型模式</h2><h3 id="2、1-单例模式"><a href="#2、1-单例模式" class="headerlink" title="2、1 单例模式"></a>2、1 单例模式</h3><p>分为懒汉式和饿汉模式</p><ul><li>饿汉式：在使用前就创建好实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton instance=<span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>懒汉式：使用到才创建实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 双重检查锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、2-简单工厂模式"><a href="#2、2-简单工厂模式" class="headerlink" title="2、2 简单工厂模式"></a>2、2 简单工厂模式</h3><p>工厂创建实例，而这些实例都实现了同一个接口，通过传递给不同的参数给工厂，工厂以此来创建不同的实例。<br>例子：<br>实体类：水果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FruitService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getFruitName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：拿AppleService为例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleService</span> <span class="keyword">implements</span> <span class="title">FruitService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFruitName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"apple"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFruitFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FruitService <span class="title">getFruit</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"apple"</span>.equals(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AppleService();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"orange"</span>.equals(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OrangeService();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleFruitFactory factory = <span class="keyword">new</span> SimpleFruitFactory();</span><br><span class="line">        System.out.println(<span class="string">"the name is "</span> + factory.getFruit(<span class="string">"apple"</span>).getFruitName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、3-多工厂模式"><a href="#2、3-多工厂模式" class="headerlink" title="2、3 多工厂模式"></a>2、3 多工厂模式</h3><p>即一个工厂中提供多个工厂方法</p><h3 id="2、4-抽象工厂模式模式"><a href="#2、4-抽象工厂模式模式" class="headerlink" title="2、4 抽象工厂模式模式"></a>2、4 抽象工厂模式模式</h3><p>创建多个工厂类</p><h3 id="2、5-建造者模式"><a href="#2、5-建造者模式" class="headerlink" title="2、5 建造者模式"></a>2、5 建造者模式</h3><p>通过不同方法来创建复合对象。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> People <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> People();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> People <span class="title">setPeopleName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setName(name);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> People <span class="title">setPeopleAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setAge(age);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuilderDemo.builder()</span><br><span class="line">                .setPeopleName(<span class="string">"小明"</span>)</span><br><span class="line">                .setPeopleAge(<span class="number">10</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、结构型模式"><a href="#三、结构型模式" class="headerlink" title="三、结构型模式"></a>三、结构型模式</h2><h3 id="3、1-适配器模式"><a href="#3、1-适配器模式" class="headerlink" title="3、1 适配器模式"></a>3、1 适配器模式</h3><p>将类或接口转换为期望的形式表示，已达到兼容的效果。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。</p><ul><li><p>类的适配器模式：通过继承目标类，实现扩展的接口类（该类包含目标类相同的方法）</p><p>目标类：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargeClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  实现扩展的接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Compatible</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bye</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassAdapter</span> <span class="keyword">extends</span> <span class="title">TargeClass</span> <span class="keyword">implements</span> <span class="title">Compatible</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bye</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"bye"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassAdapter classAdapter = <span class="keyword">new</span> ClassAdapter();</span><br><span class="line">        classAdapter.say();</span><br><span class="line">        classAdapter.bye();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对象的适配器模式<br>适配器类不继承目标类，而是持有目标类对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperAdapter</span> <span class="keyword">implements</span> <span class="title">Compatible</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TargeClass targeClass;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WrapperAdapter</span><span class="params">(TargeClass targeClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.targeClass = targeClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bye</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>接口的适配器模式</p><p>  <em>一个接口中有多个方法需要实现，但是并不是所有的都是需要的，这时可以借助于一个抽象类， 该抽象类实现了该接口， 实现了所有的方法， 不和原始的接口打交道，只和该抽象类取得联系，所以写一个类，继承该抽象类，重写需要的方法</em></p></li></ul><h3 id="3、1-装饰模式"><a href="#3、1-装饰模式" class="headerlink" title="3、1 装饰模式"></a>3、1 装饰模式</h3><p>动态地为对象添加一些新的功能,装饰器持有被装饰类的对象，装饰器和被装饰的类实现相同的接口。<br>例子：</p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Decorable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomethings</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被装饰的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">Decorable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomethings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Target doSomethings"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Decorable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Target target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Target target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomethings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before decorate"</span>);</span><br><span class="line">        target.doSomethings();</span><br><span class="line">        System.out.println(<span class="string">"after decorate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Decorable decorable = <span class="keyword">new</span> Decorator(<span class="keyword">new</span> Target());</span><br><span class="line">        decorable.doSomethings();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、行为型模式"><a href="#四、行为型模式" class="headerlink" title="四、行为型模式"></a>四、行为型模式</h2><h3 id="4、1-策略模式"><a href="#4、1-策略模式" class="headerlink" title="4、1 策略模式"></a>4、1 策略模式</h3><p>定义多个算法，有外部用户决定使用哪个算法，实现接口方法。</p><p>接口类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">implements</span> <span class="title">ICalculator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subtraction</span> <span class="keyword">implements</span> <span class="title">ICalculator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ICalculator plus = <span class="keyword">new</span> Plus();</span><br><span class="line">        System.out.println(plus.calculate(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、2-观察者模式"><a href="#4、2-观察者模式" class="headerlink" title="4、2 观察者模式"></a>4、2 观察者模式</h3><p>观察者向主题发起订阅，当主题发生改变时，会通知观察者。</p><p>定义观察者接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyNotice</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察者:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer1</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyNotice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1 had receive notices"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer2</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyNotice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"2 had receive notices"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主题:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observerList = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observerList.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observerList) &#123;</span><br><span class="line">            observer.notifyNotice();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line">        subject.add(<span class="keyword">new</span> Observer1());</span><br><span class="line">        subject.add(<span class="keyword">new</span> Observer2());</span><br><span class="line">        subject.notifyAllObserver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式总结&quot;&gt;&lt;a href=&quot;#设计模式总结&quot; class=&quot;headerlink&quot; title=&quot;设计模式总结&quot;&gt;&lt;/a&gt;设计模式总结&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本篇文章不对每一个设计模式进行细讲，只对常见的设计模式展开。&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
    
      <category term="设计模式" scheme="wubc.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="wubc.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程知识复习(一)</title>
    <link href="wubc.me/2020/03/21/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/"/>
    <id>wubc.me/2020/03/21/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-03-21T12:40:12.000Z</published>
    <updated>2020-03-21T12:42:22.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java多线程复习总结"><a href="#Java多线程复习总结" class="headerlink" title="Java多线程复习总结"></a>Java多线程复习总结</h1><h3 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><p>待补充</p><h3 id="2、线程局部变量-ThreadLocal"><a href="#2、线程局部变量-ThreadLocal" class="headerlink" title="2、线程局部变量 ThreadLocal"></a>2、线程局部变量 ThreadLocal</h3><p>用于实现线程内的数据共享。</p><p>使用set方法时会先获取当前线程的ThreadLocalMap 对象，而这个对象的key又是一个ThreadLocal对象。每个线程其实都有一份自己独享的 ThreadLocalMap 对象.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">    table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">    <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">    table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">    size = <span class="number">1</span>;</span><br><span class="line">    setThreshold(INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用场景;</p><blockquote><ul><li>订单流水</li></ul></blockquote><h3 id="3、Java并发编程库：JUC"><a href="#3、Java并发编程库：JUC" class="headerlink" title="3、Java并发编程库：JUC"></a>3、Java并发编程库：JUC</h3><ul><li>java.util.concurrent 多线程并发库</li><li>java.util.concurrent.atomic 提供原子性操作的工具类包</li><li>java.util.concurrent.lock 提供锁机制</li></ul><h4 id="3、1-java-util-concurrent-多线程并发库"><a href="#3、1-java-util-concurrent-多线程并发库" class="headerlink" title="3、1 java.util.concurrent 多线程并发库"></a>3、1 java.util.concurrent 多线程并发库</h4><p>1）执行程序：</p><h5 id="Executors-线程池工厂类：-减少线程的重复创建。提供线程利用率"><a href="#Executors-线程池工厂类：-减少线程的重复创建。提供线程利用率" class="headerlink" title="Executors 线程池工厂类： 减少线程的重复创建。提供线程利用率"></a>Executors 线程池工厂类： 减少线程的重复创建。提供线程利用率</h5><p>使用Executors创建线程池的用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建固定的线程池</span></span><br><span class="line">ExecutorService fPool = Executors.newFixedThreadPool();</span><br><span class="line"><span class="comment">//创建缓存大小的线程池</span></span><br><span class="line">ExecutorService cPool = Executors.newCachedThreadPool();</span><br><span class="line"><span class="comment">//创建单一的线程池</span></span><br><span class="line">ExecutorService sPool = Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">//创建带有定时调度的线程池</span></span><br><span class="line">Executors.newScheduledThreadPool()</span><br></pre></td></tr></table></figure><blockquote><p>ExecutorService 使用：</p></blockquote><ul><li>execute(Runnable) ： 无返回值</li><li>submit(Runnable)：返回一个 Future 对象</li><li>submit(Callable)：返回一个 Future 对象</li><li>invokeAny(…)：返回其中一个 Callable 对象的结果</li><li>invokeAll(…)：返回一系列的 Future 对象</li></ul><blockquote><p>Executors 关闭</p></blockquote><ul><li>shutdown ：关闭之前提交的任务可以继续执行知道结束</li><li>shutdownNow：中断大部分线程</li></ul><blockquote><p>corePoolSize和maximumPoolSize<br>判断线程池是否创建新的线程</p></blockquote><h5 id="ForkJoinPool-合并和分叉（线程池）"><a href="#ForkJoinPool-合并和分叉（线程池）" class="headerlink" title="ForkJoinPool 合并和分叉（线程池）"></a>ForkJoinPool 合并和分叉（线程池）</h5><p>可以将大任务分割成若干子任务，等到所有子任务完成任务后，将结果合并返回。<br>任务类型：</p><ul><li>RecursiveAction：没有返回值</li><li>RecursiveTask：有返回值，使用join方法获取各个任务的结果，最后使用ForkJoinPool.invoke()获取最终的结果</li></ul><h4 id="3、2-阻塞队列"><a href="#3、2-阻塞队列" class="headerlink" title="3、2 阻塞队列"></a>3、2 阻塞队列</h4><p>特点：入队列：队列已满，阻塞直到有空位；出队列：队列为空，阻塞直到有队列不为空。</p><p>场景：一个线程生成、另一个线程消费。</p><p><strong>BlockingQueue</strong> 的方法：</p><table><thead><tr><th>方法\处理方式</th><th>抛出异常</th><th>返回特殊值</th><th>一直阻塞</th><th>超时退出</th></tr></thead><tbody><tr><td>插入方法</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e,time,unit)</td></tr><tr><td>移除方法</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(time,unit)</td></tr><tr><td>检查方法</td><td>element()</td><td>peek()</td><td>不可用</td><td>不可用</td></tr></tbody></table><p>队列中元素不能为空</p><p>BlockingQueue 的实现类：</p><ul><li>ArrayBlockingQueue：有界的阻塞队列，底层基于数组实现，存储的元素有上限，一般这个上限初始化时就指定了，后面就无法修改了。</li><li>DelayQueue：对元素进行持有直到一个特定的延迟到期。队列中元素必须实现java.util.concurrent.Delayed 接口</li><li>LinkedBlockingQueue：以链式结果进行元素的存储，默认上限为：Integer.MAX_VALUE</li><li>PriorityBlockingQueue： 无界阻塞优先级队列，队列中元素必须实现 java.lang.Comparable 接口。</li><li>SynchronousQueue：只能存放单个元素</li></ul><p><strong>LinkedBlockingQueue</strong>：<br>notFull:表示的等待存放的条件队列<br>notEmpty: 表示等待取出的条件队列</p><ul><li>offer方法</li></ul><h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h4><p>通过全局锁的方式，同时只能有一个线程进行存放元素到队列或一个线程从队列中获取元素</p><ul><li><p>offer方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        checkNotNull(e);</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == items.length)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                enqueue(e);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">该方法首先获取锁，通过其构造方法可以知道，这个锁是非公平锁：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">    public ArrayBlockingQueue(int capacity, boolean fair) &#123;</span><br><span class="line">        if (capacity &lt;&#x3D; 0)</span><br><span class="line">            throw new IllegalArgumentException();</span><br><span class="line">        this.items &#x3D; new Object[capacity];</span><br><span class="line">        lock &#x3D; new ReentrantLock(fair);</span><br><span class="line">        notEmpty &#x3D; lock.newCondition();</span><br><span class="line">        notFull &#x3D;  lock.newCondition();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>note</strong>: 非公平锁：直接尝试占有锁；公平锁，先判断当前线程是否是第一个线程，是则获取锁，否则添加到等待队列上。</p><p>然后调用enqueue方法将元素添加到队列上;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert lock.getHoldCount() == 1;</span></span><br><span class="line">    <span class="comment">// assert items[putIndex] == null;</span></span><br><span class="line">    <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</span><br><span class="line">    items[putIndex] = x;</span><br><span class="line">    <span class="keyword">if</span> (++putIndex == items.length)</span><br><span class="line">        putIndex = <span class="number">0</span>;</span><br><span class="line">    count++;</span><br><span class="line">    notEmpty.signal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加完后，通过 <strong>notEmpty.signal()</strong> 知非空对队列。</p><p>notEmpty和notFull是Condition类型的示例.</p></li></ul><h3 id="PriorityBlockingQueue-无界优先级队列"><a href="#PriorityBlockingQueue-无界优先级队列" class="headerlink" title="PriorityBlockingQueue 无界优先级队列"></a>PriorityBlockingQueue 无界优先级队列</h3><p>内部使用到比较器，用来比较元素大小，由于这是无界队列所以这里没有notFul。默认按元素升序。元素需要实现Comparable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_INITIAL_CAPACITY = <span class="number">11</span> <span class="comment">//队列默认大小</span></span><br></pre></td></tr></table></figure><p>为什么是11？</p><ul><li><p>offer 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">     <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">     lock.lock();</span><br><span class="line">     <span class="keyword">int</span> n, cap;</span><br><span class="line">     Object[] array;</span><br><span class="line">    <span class="comment">// 元素个数大于了队列容量，则使用tryGrow进行扩容</span></span><br><span class="line">     <span class="keyword">while</span> ((n = size) &gt;= (cap = (array = queue).length))</span><br><span class="line">         tryGrow(array, cap);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         Comparator&lt;? <span class="keyword">super</span> E&gt; cmp = comparator;</span><br><span class="line">         <span class="keyword">if</span> (cmp == <span class="keyword">null</span>)</span><br><span class="line">             siftUpComparable(n, e, array);</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             siftUpUsingComparator(n, e, array, cmp);</span><br><span class="line">         size = n + <span class="number">1</span>;</span><br><span class="line">         notEmpty.signal();</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         lock.unlock();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里可以看到扩容时调用了tryGrow方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tryGrow</span><span class="params">(Object[] array, <span class="keyword">int</span> oldCap)</span> </span>&#123;</span><br><span class="line">    lock.unlock(); <span class="comment">// must release and then re-acquire main lock</span></span><br><span class="line">    Object[] newArray = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (allocationSpinLock == <span class="number">0</span> &amp;&amp;</span><br><span class="line">        UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, allocationSpinLockOffset,</span><br><span class="line">                                 <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果oldCap大于等于64，那么队列新的容量则扩容50%</span></span><br><span class="line">            <span class="keyword">int</span> newCap = oldCap + ((oldCap &lt; <span class="number">64</span>) ?</span><br><span class="line">                                   (oldCap + <span class="number">2</span>) : <span class="comment">// grow faster if small</span></span><br><span class="line">                                   (oldCap &gt;&gt; <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (newCap - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;    <span class="comment">// possible overflow</span></span><br><span class="line">                <span class="keyword">int</span> minCap = oldCap + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (minCap &lt; <span class="number">0</span> || minCap &gt; MAX_ARRAY_SIZE)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">                newCap = MAX_ARRAY_SIZE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (newCap &gt; oldCap &amp;&amp; queue == array)</span><br><span class="line">                newArray = <span class="keyword">new</span> Object[newCap];</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            allocationSpinLock = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newArray == <span class="keyword">null</span>) <span class="comment">// back off if another thread is allocating</span></span><br><span class="line">        Thread.yield();</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">if</span> (newArray != <span class="keyword">null</span> &amp;&amp; queue == array) &#123;</span><br><span class="line">        queue = newArray;</span><br><span class="line">        System.arraycopy(array, <span class="number">0</span>, newArray, <span class="number">0</span>, oldCap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>note</strong>：</p><ul><li><p>为什么是64作为阈值？</p></li><li><p>为什么要提前释放锁</p></li><li><p>扩容的时候可以进行入队列操作，所以是用到CAS，只允许一个线程进行扩容，如果扩容失败了，则通过Thread.yield()让出CPU，让改线程重新获取锁。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (newArray &#x3D;&#x3D; null) &#x2F;&#x2F; back off if another thread is allocating</span><br><span class="line">    Thread.yield();</span><br></pre></td></tr></table></figure></blockquote><p>复制数组是在获取锁后面才执行的，是为了保证复制的数组是最新的。</p><p>排序方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">siftUpComparable</span><span class="params">(<span class="keyword">int</span> k, T x, Object[] array)</span> </span>&#123;</span><br><span class="line">    Comparable&lt;? <span class="keyword">super</span> T&gt; key = (Comparable&lt;? <span class="keyword">super</span> T&gt;) x;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 确定父节点元素位置</span></span><br><span class="line">        <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//获取父节点的值</span></span><br><span class="line">        Object e = array[parent];</span><br><span class="line">        <span class="comment">// 如果插入的值比父节点大，那么完成堆的建立</span></span><br><span class="line">        <span class="keyword">if</span> (key.compareTo((T) e) &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        array[k] = e;</span><br><span class="line">        k = parent;</span><br><span class="line">    &#125;</span><br><span class="line">    array[k] = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>例子：假设有三个节点0、1、2，值也是0、1、2。1、2分别是0节点的左右子节点，那么如果插入的k=3,这时先找出他要插入位置的父节点，通过<strong>(k-1)&gt;&gt;&gt;1</strong>可以得出，parent=1,也就是1节点，这个时候将这个插入的值跟其父节点的值进行比较，如果发现是大于父节点的值，那么完成堆的构建，跳出循环。否则与父节点进行交换，</p></li></ul><ul><li><p>poll方法</p><p>该方法通过dequeue方法进行出队列，获取元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Object[] array = queue;</span><br><span class="line">        E result = (E) array[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 获取队列尾部元素，然后将原来的位置的指向设置为空</span></span><br><span class="line">        E x = (E) array[n];</span><br><span class="line">        array[n] = <span class="keyword">null</span>;</span><br><span class="line">        Comparator&lt;? <span class="keyword">super</span> E&gt; cmp = comparator;</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">// 把元素插入到下标为0的位置上，然后调整成最小堆</span></span><br><span class="line">            siftDownComparable(<span class="number">0</span>, x, array, n);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            siftDownUsingComparator(<span class="number">0</span>, x, array, n, cmp);</span><br><span class="line">        size = n;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>note</strong>：最小堆构建过程</p></li></ul><ul><li><p>take操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    E result;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> ( (result = dequeue()) == <span class="keyword">null</span>)</span><br><span class="line">            notEmpty.await();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>队列没有元素则一直阻塞</p></li></ul><h5 id="DelayQueue-延时无界阻塞队列"><a href="#DelayQueue-延时无界阻塞队列" class="headerlink" title="DelayQueue 延时无界阻塞队列"></a>DelayQueue 延时无界阻塞队列</h5><p>DelayQueue = BlockingQueue +PriorityQueue + Delayed</p><h4 id="3、3-非阻塞队列"><a href="#3、3-非阻塞队列" class="headerlink" title="3、3 非阻塞队列"></a>3、3 非阻塞队列</h4><p>消费者出队和生产者入队都不会被阻塞。常用方法跟阻塞队列差不多。</p><h5 id="悲观锁和乐观锁"><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h5><p>悲观锁：认为发送了冲突，那么就会破坏数据的一致性，因此使用独占锁禁止冲突发送。<br>乐观锁：认为即使发送了冲突，也不一定造成损坏</p><h5 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h5><p>CAS(V,A,B)，包含了三个值，内存地址V，旧的预期值A，要修改的新值B。当V的值等于A时，才会将V的值更新为B</p><h5 id="ConcurrentLinkedQueue-非阻塞无界链表队列"><a href="#ConcurrentLinkedQueue-非阻塞无界链表队列" class="headerlink" title="ConcurrentLinkedQueue 非阻塞无界链表队列"></a>ConcurrentLinkedQueue 非阻塞无界链表队列</h5><p>采用先进先出的入队原则。采用CAS解决当前节点与下一节点之间的安全性链接和对当前节点的赋值。<br>相关入队和出队方法可以参考《Java并发编程的艺术》P161~P167</p><h5 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h5><p> 采用“分段锁”策略,有多个segment组成，segment使用的重入锁，每个segment内部又维护hashentity 。默认下允许16个线程并发（最大并发数为 65536？）<br> 构造方法分析得出的结论：</p><blockquote><p><em>Segment 数组的大小 ssize 是由 concurrentLevel 来决定的，但是却不一定等于concurrentLevel，ssize 一定是大于或等于 concurrentLevel 的最小的 2 的次幂。比如：默认情况下concurrentLevel 是 16，则 ssize 为 16；若 concurrentLevel 为 14，ssize 为 16；若 concurrentLevel 为17， 则 ssize 为 32。 为什么 Segment 的数组大小一定是 2 的次幂？其实主要是便于通过按位与的散列算法来定位 Segment 的 index。</em></p></blockquote><p><em>分析见《Java并发编程艺术》P158~P159</em></p><p><strong>note</strong>:ssize最大值为65536，segmentShift最大值为16？segmentMask最大值为65535</p><h5 id="ConcurrentSkipListMap-非阻塞-Hash-跳表集合"><a href="#ConcurrentSkipListMap-非阻塞-Hash-跳表集合" class="headerlink" title="ConcurrentSkipListMap 非阻塞 Hash 跳表集合"></a>ConcurrentSkipListMap 非阻塞 Hash 跳表集合</h5><p>与TreeMap类型，都是有序的哈希表，主要区别为：</p><ul><li>ConcurrentSkipListMap是线程安全，TreeMap非线程安全</li><li>ConcurrentSkipListMap通过<strong>跳表</strong>实现，而TreeMap通过<strong>红黑树</strong>实现</li></ul><p><strong>SkipList</strong>跳表：</p><blockquote></blockquote><p>ConcurrentSkipListMap 提供了一种线程安全的并发访问的排序映射表,主要用到了 Node 和 Index 两种节点的存储方式， 通过 volatile 关键字实现了并发的操做</p><h4 id="原子包"><a href="#原子包" class="headerlink" title="原子包"></a>原子包</h4><h4 id="AtomicBoolean-原子性布尔"><a href="#AtomicBoolean-原子性布尔" class="headerlink" title="AtomicBoolean 原子性布尔"></a>AtomicBoolean 原子性布尔</h4><p>方法：</p><ul><li><strong>compareAndSet(expectedValue, updateValue)</strong>：如果比较的值等于expectedValue，那么原子性的将expectedValue更新为updateValue。</li><li>getAndSet(boolean b),返回原来的值，并设置新值为b</li></ul><h4 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h4><h5 id="AtomicIntegerArray-原子性整型数组"><a href="#AtomicIntegerArray-原子性整型数组" class="headerlink" title="AtomicIntegerArray 原子性整型数组"></a>AtomicIntegerArray 原子性整型数组</h5><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="实现线程的方式有哪些："><a href="#实现线程的方式有哪些：" class="headerlink" title="实现线程的方式有哪些："></a>实现线程的方式有哪些：</h4><ul><li>继承Thread</li><li>实现Runnable</li><li>使用Excutor</li></ul><h4 id="wait和sleep区别："><a href="#wait和sleep区别：" class="headerlink" title="wait和sleep区别："></a>wait和sleep区别：</h4><p>wait会释放锁，sleep会一直持有锁;wait是所有object都有方法，sleep是线程类所有的。</p><h5 id="synchronized-和-volatile"><a href="#synchronized-和-volatile" class="headerlink" title="synchronized 和 volatile"></a>synchronized 和 volatile</h5><p>作用范围：<br>synchronized:</p><ul><li>变量、方法、类</li></ul><p>volatile：</p><ul><li>变量</li></ul><p>作用：</p><p>synchronized 可能会造成线程的阻塞会被编译器优化。<br>volatile：保证可见性，禁止指令重排序（不会被编译器优化）</p><h5 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h5><p>作用：减少资源消、提高响应速度、增加线程的管理性。</p><p>线程池创建过程：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-gold-cdn.xitu.io/2019/7/7/16bca03a5a6fd78f?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>提交一个任务，线程池里存活的核心线程数小于线程数corePoolSize时，线程池会创建一个核心线程去处理提交的任务。</li><li>如果线程池核心线程数已满，即线程数已经等于corePoolSize，一个新提交的任务，会被放进任务队列workQueue排队等待执行。</li><li>当线程池里面存活的线程数已经等于corePoolSize了,并且任务队列workQueue也满，判断线程数是否达到maximumPoolSize，即最大线程数是否已满，如果没到达，创建一个非核心线程执行提交的任务。</li><li>如果当前的线程数达到了maximumPoolSize，还有新的任务过来的话，直接采用拒绝策略处理。</li></ul><p>资料参考：<em><a href="https://juejin.im/post/5d1882b1f265da1ba84aa676" target="_blank" rel="noopener">面试必备：Java线程池解析</a></em></p><h5 id="控制线程并发数"><a href="#控制线程并发数" class="headerlink" title="控制线程并发数"></a>控制线程并发数</h5><p>可以使用信号量Semaphore</p><h5 id="synchronized-和lock对方法加锁的情况分析："><a href="#synchronized-和lock对方法加锁的情况分析：" class="headerlink" title="synchronized 和lock对方法加锁的情况分析："></a>synchronized 和lock对方法加锁的情况分析：</h5><p>如果使用lock对两个方法都加锁了的，那么同时只能有一个线程访问；<br>如果使用synchronized对两个方法都加锁了的，那么同时可以有两个线程访问，因为它们持有同一把锁；</p><h5 id="避免死锁的方法："><a href="#避免死锁的方法：" class="headerlink" title="避免死锁的方法："></a>避免死锁的方法：</h5><ul><li>按顺序进行加锁：使用join，等待另一个线程执行完才执行自己的线程</li><li>加锁时限：线程尝试获取锁的时候加上一定的时限， 超过时限则放弃对该锁的请求， 并释放自己占有的锁。例如使用：lock.tryLock(5000, TimeUnit.MILLISECONDS)</li></ul><h5 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h5><ul><li>使用共享变量，加上join做配合</li><li>使用wait/notify机制 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java多线程复习总结&quot;&gt;&lt;a href=&quot;#Java多线程复习总结&quot; class=&quot;headerlink&quot; title=&quot;Java多线程复习总结&quot;&gt;&lt;/a&gt;Java多线程复习总结&lt;/h1&gt;&lt;h3 id=&quot;1、基本概念&quot;&gt;&lt;a href=&quot;#1、基本概念&quot; cla
      
    
    </summary>
    
    
      <category term="多线程" scheme="wubc.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="Java，多线程" scheme="wubc.me/tags/Java%EF%BC%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java基础复习</title>
    <link href="wubc.me/2020/03/21/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    <id>wubc.me/2020/03/21/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-03-21T12:32:28.000Z</published>
    <updated>2020-03-21T12:34:52.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="1、基础语法"><a href="#1、基础语法" class="headerlink" title="1、基础语法"></a>1、基础语法</h3><h4 id="1、1-深拷贝和浅拷贝"><a href="#1、1-深拷贝和浅拷贝" class="headerlink" title="1、1 深拷贝和浅拷贝"></a>1、1 深拷贝和浅拷贝</h4><p>要区别是深拷贝对于对象的引用类型会创建新的对象引用，而浅拷贝直接指向同一个引用。object的clone方法是浅拷贝。</p><p>想要实现深拷贝，对象以及被引用的对象都需要实现Cloneable接口</p><h4 id="1、2-equals和hashcode"><a href="#1、2-equals和hashcode" class="headerlink" title="1、2 equals和hashcode"></a>1、2 equals和hashcode</h4><p>如果equals为true，那么hashcode一定相同，反之hashcode相等，equals不一定为true。</p><p>equals特性：自反性、传递性</p><p>重写equals方法：</p><ul><li>1、参数是否为这个对象的引用、</li><li>2、使用 instanceof 操作符检查”参数是否为正确的类型 </li><li>3、是否满足对称性、传递性、一致性 </li><li>4、重写 hashCode</li></ul><h4 id="1、3-参数传递形式"><a href="#1、3-参数传递形式" class="headerlink" title="1、3 参数传递形式"></a>1、3 参数传递形式</h4><p>Java参数传递都是值传递。<br>分析参考文章：<a href="https://juejin.im/post/5bce68226fb9a05ce46a0476#heading-12" target="_blank" rel="noopener">这一次，彻底解决Java的值传递和引用传递</a></p><h4 id="1、4-重载和重写的区别"><a href="#1、4-重载和重写的区别" class="headerlink" title="1、4 重载和重写的区别"></a>1、4 重载和重写的区别</h4><p>重载：编译时的多态性，发生在一个类中。规则：</p><ul><li>方法名一致，参数列表中参数的顺序，类型，个数不同</li><li>重载与方法的返回值无关（因编译器无法只根据返回类型来确定调用哪个方法），存在于父类和子类，同类中</li><li>可以抛出不同的异常，可以有不同修饰符</li></ul><p>重写：运行时多态，子类重写父类的方法。规则：</p><ul><li>.参数列表、返回类型与父类一致</li><li>构造方法、被final、static修饰的方法不能被重写</li><li>访问权限不能比父类的方法小</li><li>不能抛出新的强制性异常、更广泛的强制性异常</li></ul><h4 id="1、5-接口和抽象类的区别与特点"><a href="#1、5-接口和抽象类的区别与特点" class="headerlink" title="1、5 接口和抽象类的区别与特点"></a>1、5 接口和抽象类的区别与特点</h4><p>抽象类：</p><ul><li>抽象类中可以定义构造器</li><li>可以有抽象方法和具体方法 </li><li>接口中的成员全都是 public 的 </li><li>抽象类中可以定义成员变量 </li><li>有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法 </li><li>抽象类中可以包含静态方法（该静态方法不能是抽象的，因为静态方法不能被重写）</li><li>一个类只能继承一个抽象类</li></ul><p>接口类;</p><ul><li>接口中不能定义构造器 </li><li>方法全部都是抽象方法 </li><li>抽象类中的成员可以是 private、默认、protected、public</li><li>接口中定义的成员变量实际上都是常量 </li><li>接口中不能有静态方法 </li><li>一个类可以实现多个接口</li></ul><h4 id="1、6-String特性"><a href="#1、6-String特性" class="headerlink" title="1、6 String特性"></a>1、6 String特性</h4><ul><li>String是不可变的，如果进行了“+”操作，那么将产生新的对象，指向了新的对象</li><li>字符串内容相同，认为是代表同一个对象</li><li>每次通过new实例一个字符串，即使字符串内容相同，也会产生新的对象</li></ul><h3 id="2、Java异常机制"><a href="#2、Java异常机制" class="headerlink" title="2、Java异常机制"></a>2、Java异常机制</h3><h4 id="2、1-分类"><a href="#2、1-分类" class="headerlink" title="2、1 分类"></a>2、1 分类</h4><ul><li>异常exceptionError<ul><li>编译时异常：在编译时可以体现出来。用 try…catch 块或抛出该异常进行处理</li><li>运行时异常：在运行时发生的异常，常见的有下标越界等</li></ul></li><li>错误Error:一般是指与虚拟机相关的问题</li></ul><h4 id="2、2-tr…catch-finally的返回值"><a href="#2、2-tr…catch-finally的返回值" class="headerlink" title="2、2 tr…catch..finally的返回值"></a>2、2 tr…catch..finally的返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(getNum());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述打印结果是3，如果try语句块中发生了异常，那么它将进行到catch块进行处理，catch块里是一个return语句，而存在finally，所以会先执行finally里面的语句，finally语句又是一个return语句，那么该方法将会被结束，catch的返回结果不能被真正返回.</p><h4 id="2、3-throw-和-throws-的区别"><a href="#2、3-throw-和-throws-的区别" class="headerlink" title="2、3 throw 和 throws 的区别"></a>2、3 throw 和 throws 的区别</h4><p>throw:</p><ul><li>作用在方法体内，向外抛出异常实例<br>throws:</li><li>声明在方法后面，由调用者处理，抛出的某种类型的异常，抛出的异常不一定会发生</li></ul><h4 id="2、4-final、finally、finalize-的区别？"><a href="#2、4-final、finally、finalize-的区别？" class="headerlink" title="2、4 final、finally、finalize 的区别？"></a>2、4 final、finally、finalize 的区别？</h4><p>final：</p><ul><li>用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，被其修饰的类不可继承</li></ul><p>finally：</p><ul><li>异常处理语句结构的一部分，表示总是执行</li></ul><p>finalize：</p><ul><li>Object 类的一个方法，在垃圾回收器执行的时候会调用被回收对象的此方法 </li></ul><h4 id="2、5-StringBuilder-、StringBuffer-的区别"><a href="#2、5-StringBuilder-、StringBuffer-的区别" class="headerlink" title="2、5 StringBuilder 、StringBuffer 的区别"></a>2、5 StringBuilder 、StringBuffer 的区别</h4><p>StringBuilder：非同步，效率高，多线程下不安全<br>StringBuffer：同步，效率低，线程安全</p><p><strong>tips</strong>: String的“+”号操作编译为到StringBuilder的append,因此在建议在循环中不要直接使用“+”号进行连接字符串，这样会产生大量的StringBuilder对象。</p><h4 id="Java基本数据类型及范围"><a href="#Java基本数据类型及范围" class="headerlink" title="Java基本数据类型及范围"></a>Java基本数据类型及范围</h4><table><thead><tr><th>名称</th><th>字节数</th><th>范围</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>-128～127</td></tr><tr><td>short</td><td>2</td><td>-32768～32767</td></tr><tr><td>int</td><td>4</td><td>-2147483648～2147483647</td></tr><tr><td>long</td><td>8</td><td>-2^63～2^63-1</td></tr><tr><td>flot</td><td>4</td><td>-3.403E38～3.403E38</td></tr><tr><td>double</td><td>8</td><td>-1.798E308～1.798E308</td></tr><tr><td>char</td><td>2</td><td>表示一个字符</td></tr><tr><td>boolean</td><td>1</td><td>true、false</td></tr></tbody></table><h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><p>每个基本类型都有对象的包装类。</p><p><strong>note</strong>: 如果两个包装类Integer进行比较，如果比较的数值在-128 到 127 之间， 那么不会 new 新的 Integer 对象， 而是直接引用常量池中的 Integer 对象。<br>而Integer和int类型进行比较，将会自动拆箱成两个int类型比较。</p><h3 id="3、IO"><a href="#3、IO" class="headerlink" title="3、IO"></a>3、IO</h3><h4 id="3、1-流的分类："><a href="#3、1-流的分类：" class="headerlink" title="3、1 流的分类："></a>3、1 流的分类：</h4><p>从方向划分：输入流、输出流<br>从功能划分：节点流、处理流<br>从处理数据单位划分：字节流、字符流</p><h4 id="3、2-流的基本操作"><a href="#3、2-流的基本操作" class="headerlink" title="3、2 流的基本操作"></a>3、2 流的基本操作</h4><h3 id="4、集合"><a href="#4、集合" class="headerlink" title="4、集合"></a>4、集合</h3><h4 id="4、1-ArrayList的实现"><a href="#4、1-ArrayList的实现" class="headerlink" title="4、1 ArrayList的实现"></a>4、1 ArrayList的实现</h4><p>底层是使用一个Object[]数组实现的。</p><h5 id="一、构造方法分析"><a href="#一、构造方法分析" class="headerlink" title="一、构造方法分析"></a>一、构造方法分析</h5><p>1）空参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 其中private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}   //一个空数组</p></blockquote><p>2）带参构造：指定初始值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3) 带参构造：参数为一个Collection子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            <span class="title">elementData</span> </span>= Arrays.copyOf(elementData, size, Object[]<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二、add方法"><a href="#二、add方法" class="headerlink" title="二、add方法"></a>二、add方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了<strong>ensureCapacityInternal</strong>方法，让我们继续看这个方法;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算分配的容量，DEFAULT_CAPACITY这个值为10，通过Math.max方法来取得它们之间的最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>note</strong>:modCount的作用:用来记录集合的修改次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的主要作用是复制一个新的数组。首先初始新分配的容量newCapacity为原来的容量+原来容量的一般，当与minCapacity比价时，取最大的。然后再与MAX_ARRAY_SIZE进行比较，这个<em>MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8</em>  ，如果比这个值还要大，将进行下面的判断;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见newCapacity的值，最多为Integer.MAX_VALUE</p><h5 id="三、remove方法"><a href="#三、remove方法" class="headerlink" title="三、remove方法"></a>三、remove方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先检查下标是否越界，获取需要删除的值，用来做返回值，如果要删除的元素不是最后一个元素，那么数组中后面的元素整体往前移动一位。</p><h5 id="四、clear方法"><a href="#四、clear方法" class="headerlink" title="四、clear方法"></a>四、clear方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     modCount++;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// clear to let GC do its work</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">         elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     size = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>该方法实现比较简单，仅仅是将所有元素置为空了。</p><h4 id="4、2-并发集合"><a href="#4、2-并发集合" class="headerlink" title="4、2 并发集合"></a>4、2 并发集合</h4><p><strong>ConcurrentHashMap</strong> 分析：</p><p>与普通的HashMap相比，多了个concurrencyLevel属性，内部使用到了锁分段技术，Segment 数组，默认情况下有16个段。</p><p>put操作：该操作运行16个线程并发无阻塞操作集合镀锡，通过计算hash来确定Segment对象，借此对象的put方法来完成操作。</p><p>get操作：类似于put操作，也是借用Segment对象的get方法来实现的。由于Segment对象对象的数组HashEntity的数量是用volatile声明的，因此总是能正确的获取到数组的大小。而HashEntity的属性也是final，所以该链表对象不会发生改变。</p><h4 id="4、3-HashMap和HashTable"><a href="#4、3-HashMap和HashTable" class="headerlink" title="4、3 HashMap和HashTable"></a>4、3 HashMap和HashTable</h4><p>两者都实现了Map接口。<br>HashMap：</p><ul><li>非线程安全、高效、支持键值对都为null的</li></ul><p>HashTable:</p><ul><li>线程安全，不支持null值和null键</li></ul><h4 id="4、4-SortMap和TreeMap"><a href="#4、4-SortMap和TreeMap" class="headerlink" title="4、4 SortMap和TreeMap"></a>4、4 SortMap和TreeMap</h4><h4 id="4、5-ArrayList和LinkList"><a href="#4、5-ArrayList和LinkList" class="headerlink" title="4、5 ArrayList和LinkList"></a>4、5 ArrayList和LinkList</h4><p>ArrayList:</p><ul><li>访问速度快</li><li>插入慢 </li><li>开销不固定</li><li>底层是数组实现</li></ul><p>LinkList:</p><ul><li>随机访问速度较慢</li><li>插入快</li><li>底层是双向循环列表</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h1&gt;&lt;h3 id=&quot;1、基础语法&quot;&gt;&lt;a href=&quot;#1、基础语法&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="Java" scheme="wubc.me/categories/Java/"/>
    
    
      <category term="Java基础" scheme="wubc.me/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper系列教程之一（Mac下安装zookeeper）</title>
    <link href="wubc.me/2020/02/29/zookeeper%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80%EF%BC%88Mac%E4%B8%8B%E5%AE%89%E8%A3%85zookeeper%EF%BC%89/"/>
    <id>wubc.me/2020/02/29/zookeeper%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80%EF%BC%88Mac%E4%B8%8B%E5%AE%89%E8%A3%85zookeeper%EF%BC%89/</id>
    <published>2020-02-29T07:09:30.000Z</published>
    <updated>2020-03-01T13:09:40.507Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-Mac下zookeeper的安装"><a href="#一、-Mac下zookeeper的安装" class="headerlink" title="一、 Mac下zookeeper的安装"></a>一、 Mac下zookeeper的安装</h3><p>两种下载方式</p><p>第一种直接网上下载</p><p>下载地址：<br><strong><a href="https://zookeeper.apache.org/releases.html#download" target="_blank" rel="noopener">https://zookeeper.apache.org/releases.html#download</a></strong></p><p>国内的镜像地址：<br><strong><a href="https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/</a></strong></p><p>注意如果不需要源码包请下载文件名带bin的那个文件，那个是编译好的，否则运行zookeeper时会出现</p><blockquote><p>错误: 找不到或无法加载主类 org.apache.zookeeper.server.quorum.QuorumPeerMain的问题</p></blockquote><p>第二种使用homebrew下载：</p><blockquote><p>brew install zookeeper</p></blockquote><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>1、配置解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime&#x3D;2000</span><br><span class="line"># The number of ticks that the initial </span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit&#x3D;10</span><br><span class="line"># The number of ticks that can pass between </span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit&#x3D;5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use &#x2F;tmp for storage, &#x2F;tmp here is just </span><br><span class="line"># example sakes.</span><br><span class="line">dataDir&#x3D;&#x2F;tmp&#x2F;zookeeper</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort&#x3D;2181</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns&#x3D;60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the </span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http:&#x2F;&#x2F;zookeeper.apache.org&#x2F;doc&#x2F;current&#x2F;zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount&#x3D;3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval&#x3D;1</span><br><span class="line">server.1&#x3D;127.0.0.1:2888:3888</span><br></pre></td></tr></table></figure><ul><li><p>tickTime：ZK中的一个时间单元。ZK中所有时间都是以这个时间单元为基础，进行整数倍配置的。例如，session的最小超时时间是2*tickTime。</p></li><li><p>initLimit：Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。Leader允许F在initLimit时间内完成这个工作。通常情况下，我们不用太在意这个参数的设置。如果ZK集群的数据量确实很大了，F在启动的时候，从Leader上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了。(No Java system property)</p></li><li><p>syncLimit：在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。如果L发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在线了。注意：不要把这个参数设置得过大，否则可能会掩盖一些问题。(No Java system property)</p></li><li><p>dataDir：存储快照文件snapshot的目录。默认情况下，事务日志也会存储在这里。建议同时配置参数dataLogDir, 事务日志的写性能直接影响zk性能。</p></li><li><p>clientPort： 客户端连接server的端口，即对外服务端口，默认是2181。</p></li><li><p>server.x=[hostname]:nnnnn[:nnnnn]：这里的x是一个数字，与myid文件中的id是一致的。右边可以配置两个端口，第一个端口用于F和L之间的数据同步和其它通信，第二个端口用于Leader选举过程中投票通信。</p></li></ul><p>2、配置修改</p><p>单机模式：</p><p>伪集群模式</p><h3 id="三、启动与连接"><a href="#三、启动与连接" class="headerlink" title="三、启动与连接"></a>三、启动与连接</h3><ul><li><p>1、服务端启动：进入zookeeper的bin目录，在终端下执行如下命令启动</p><blockquote><p>./zkServer.sh start</p></blockquote><p>  当输出<strong>Starting zookeeper … STARTED</strong> 时表示成功了</p></li><li><p>2、客户端连接，同样在bin目录下执行命令</p><blockquote><p>./zkCli.sh</p></blockquote><p>  然后就进入到JLine控制台命令交互模式</p></li></ul><h5 id="欢迎关注公众号"><a href="#欢迎关注公众号" class="headerlink" title="欢迎关注公众号"></a>欢迎关注公众号</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wubc.oss-cn-shenzhen.aliyuncs.com/qrcode_for_gh_c47b54491983_258.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="欢迎进入京东小店，领券购物更优惠"><a href="#欢迎进入京东小店，领券购物更优惠" class="headerlink" title="欢迎进入京东小店，领券购物更优惠"></a><a href="https://store.ixiaocong.net/#/index/ZJ9VTA" target="_blank" rel="noopener">欢迎进入京东小店，领券购物更优惠</a></h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wubc.oss-cn-shenzhen.aliyuncs.com/%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9B%BE%E7%89%87_2%E6%9C%8829%E6%97%A516%E6%97%B648%E5%88%8643%E7%A7%92%20%281%29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、-Mac下zookeeper的安装&quot;&gt;&lt;a href=&quot;#一、-Mac下zookeeper的安装&quot; class=&quot;headerlink&quot; title=&quot;一、 Mac下zookeeper的安装&quot;&gt;&lt;/a&gt;一、 Mac下zookeeper的安装&lt;/h3&gt;&lt;p&gt;两种
      
    
    </summary>
    
    
      <category term="分布式" scheme="wubc.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="wubc.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="zookeeper" scheme="wubc.me/tags/zookeeper/"/>
    
  </entry>
  
</feed>
