{"meta":{"title":"无编程","subtitle":"wubc的个人博客，公众号：后端随笔","description":"技术、生活、工作","author":"wubc","url":"wubc.me","root":"/"},"pages":[{"title":"无编程 | 404","date":"2020-02-29T07:28:36.278Z","updated":"2020-02-29T07:27:41.983Z","comments":true,"path":"404.html","permalink":"wubc.me/404.html","excerpt":"","text":""},{"title":"404","date":"2020-02-29T07:02:11.000Z","updated":"2020-02-29T07:02:11.876Z","comments":true,"path":"404/index.html","permalink":"wubc.me/404/index.html","excerpt":"","text":""},{"title":"无编程 | 404","date":"2020-02-29T07:27:41.983Z","updated":"2020-02-29T07:27:41.983Z","comments":true,"path":"404/404.html","permalink":"wubc.me/404/404.html","excerpt":"","text":""},{"title":"","date":"2020-02-29T04:38:14.568Z","updated":"2020-02-29T04:38:14.560Z","comments":false,"path":"categories/index.html","permalink":"wubc.me/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-02-29T07:32:39.181Z","updated":"2020-02-29T04:37:49.936Z","comments":false,"path":"tags/index.html","permalink":"wubc.me/tags/index.html","excerpt":"","text":""},{"title":"关于我","date":"2020-03-02T13:45:34.901Z","updated":"2020-02-29T09:03:31.695Z","comments":false,"path":"aboutme/index.html","permalink":"wubc.me/aboutme/index.html","excerpt":"","text":"编程让生活更加美好@card{ 从事Java后端开发，本博客记录本人工作内外所学的知识，或生活思考，偶尔瞎写。内容同步到本人公众号“后端随笔”欢迎关注一波。同步经常在京东购物的朋友们可以京东优惠券先领券再购物，更加优惠哟。 } @timeline{ 2015@item{ 1月1日Android开发 } 2018@item{ 7月1日java后端开发 } 未来@item{ —可期 } }"}],"posts":[{"title":"Java基础复习","slug":"Java基础复习","date":"2020-03-21T12:32:28.000Z","updated":"2020-03-21T12:34:52.197Z","comments":true,"path":"2020/03/21/Java基础复习/","link":"","permalink":"wubc.me/2020/03/21/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/","excerpt":"","text":"Java基础1、基础语法1、1 深拷贝和浅拷贝要区别是深拷贝对于对象的引用类型会创建新的对象引用，而浅拷贝直接指向同一个引用。object的clone方法是浅拷贝。 想要实现深拷贝，对象以及被引用的对象都需要实现Cloneable接口 1、2 equals和hashcode如果equals为true，那么hashcode一定相同，反之hashcode相等，equals不一定为true。 equals特性：自反性、传递性 重写equals方法： 1、参数是否为这个对象的引用、 2、使用 instanceof 操作符检查”参数是否为正确的类型 3、是否满足对称性、传递性、一致性 4、重写 hashCode 1、3 参数传递形式Java参数传递都是值传递。分析参考文章：这一次，彻底解决Java的值传递和引用传递 1、4 重载和重写的区别重载：编译时的多态性，发生在一个类中。规则： 方法名一致，参数列表中参数的顺序，类型，个数不同 重载与方法的返回值无关（因编译器无法只根据返回类型来确定调用哪个方法），存在于父类和子类，同类中 可以抛出不同的异常，可以有不同修饰符 重写：运行时多态，子类重写父类的方法。规则： .参数列表、返回类型与父类一致 构造方法、被final、static修饰的方法不能被重写 访问权限不能比父类的方法小 不能抛出新的强制性异常、更广泛的强制性异常 1、5 接口和抽象类的区别与特点抽象类： 抽象类中可以定义构造器 可以有抽象方法和具体方法 接口中的成员全都是 public 的 抽象类中可以定义成员变量 有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法 抽象类中可以包含静态方法（该静态方法不能是抽象的，因为静态方法不能被重写） 一个类只能继承一个抽象类 接口类; 接口中不能定义构造器 方法全部都是抽象方法 抽象类中的成员可以是 private、默认、protected、public 接口中定义的成员变量实际上都是常量 接口中不能有静态方法 一个类可以实现多个接口 1、6 String特性 String是不可变的，如果进行了“+”操作，那么将产生新的对象，指向了新的对象 字符串内容相同，认为是代表同一个对象 每次通过new实例一个字符串，即使字符串内容相同，也会产生新的对象 2、Java异常机制2、1 分类 异常exceptionError 编译时异常：在编译时可以体现出来。用 try…catch 块或抛出该异常进行处理 运行时异常：在运行时发生的异常，常见的有下标越界等 错误Error:一般是指与虚拟机相关的问题 2、2 tr…catch..finally的返回值1234567891011121314public static void main(String[] args) &#123; System.out.println(getNum());&#125;public static int getNum()&#123; try &#123; int a=10/0; return a; &#125;catch (Exception e)&#123; return 2; &#125;finally &#123; return 3; &#125;&#125; 上述打印结果是3，如果try语句块中发生了异常，那么它将进行到catch块进行处理，catch块里是一个return语句，而存在finally，所以会先执行finally里面的语句，finally语句又是一个return语句，那么该方法将会被结束，catch的返回结果不能被真正返回. 2、3 throw 和 throws 的区别throw: 作用在方法体内，向外抛出异常实例throws: 声明在方法后面，由调用者处理，抛出的某种类型的异常，抛出的异常不一定会发生 2、4 final、finally、finalize 的区别？final： 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，被其修饰的类不可继承 finally： 异常处理语句结构的一部分，表示总是执行 finalize： Object 类的一个方法，在垃圾回收器执行的时候会调用被回收对象的此方法 2、5 StringBuilder 、StringBuffer 的区别StringBuilder：非同步，效率高，多线程下不安全StringBuffer：同步，效率低，线程安全 tips: String的“+”号操作编译为到StringBuilder的append,因此在建议在循环中不要直接使用“+”号进行连接字符串，这样会产生大量的StringBuilder对象。 Java基本数据类型及范围 名称 字节数 范围 byte 1 -128～127 short 2 -32768～32767 int 4 -2147483648～2147483647 long 8 -2^63～2^63-1 flot 4 -3.403E38～3.403E38 double 8 -1.798E308～1.798E308 char 2 表示一个字符 boolean 1 true、false 包装类每个基本类型都有对象的包装类。 note: 如果两个包装类Integer进行比较，如果比较的数值在-128 到 127 之间， 那么不会 new 新的 Integer 对象， 而是直接引用常量池中的 Integer 对象。而Integer和int类型进行比较，将会自动拆箱成两个int类型比较。 3、IO3、1 流的分类：从方向划分：输入流、输出流从功能划分：节点流、处理流从处理数据单位划分：字节流、字符流 3、2 流的基本操作4、集合4、1 ArrayList的实现底层是使用一个Object[]数组实现的。 一、构造方法分析1）空参构造 123public ArrayList() &#123; this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;&#125; 其中private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {} //一个空数组 2）带参构造：指定初始值 12345678910public ArrayList(int initialCapacity) &#123; if (initialCapacity &gt; 0) &#123; this.elementData = new Object[initialCapacity]; &#125; else if (initialCapacity == 0) &#123; this.elementData = EMPTY_ELEMENTDATA; &#125; else &#123; throw new IllegalArgumentException(\"Illegal Capacity: \"+ initialCapacity); &#125;&#125; 3) 带参构造：参数为一个Collection子类 1234567891011public ArrayList(Collection&lt;? extends E&gt; c) &#123; elementData = c.toArray(); if ((size = elementData.length) != 0) &#123; // c.toArray might (incorrectly) not return Object[] (see 6260652) if (elementData.getClass() != Object[].class) elementData = Arrays.copyOf(elementData, size, Object[].class); &#125; else &#123; // replace with empty array. this.elementData = EMPTY_ELEMENTDATA; &#125;&#125; 二、add方法12345public boolean add(E e) &#123; ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true;&#125; 这里调用了ensureCapacityInternal方法，让我们继续看这个方法; 123private void ensureCapacityInternal(int minCapacity) &#123; ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));&#125; 计算分配的容量，DEFAULT_CAPACITY这个值为10，通过Math.max方法来取得它们之间的最大值。 123456private static int calculateCapacity(Object[] elementData, int minCapacity) &#123; if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123; return Math.max(DEFAULT_CAPACITY, minCapacity); &#125; return minCapacity;&#125; 1234567private void ensureExplicitCapacity(int minCapacity) &#123; modCount++; // overflow-conscious code if (minCapacity - elementData.length &gt; 0) grow(minCapacity);&#125; note:modCount的作用:用来记录集合的修改次数 1234567891011private void grow(int minCapacity) &#123; // overflow-conscious code int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity);&#125; 这个方法的主要作用是复制一个新的数组。首先初始新分配的容量newCapacity为原来的容量+原来容量的一般，当与minCapacity比价时，取最大的。然后再与MAX_ARRAY_SIZE进行比较，这个MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8 ，如果比这个值还要大，将进行下面的判断; 1234567 private static int hugeCapacity(int minCapacity) &#123; if (minCapacity &lt; 0) // overflow throw new OutOfMemoryError(); return (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;&#125; 可见newCapacity的值，最多为Integer.MAX_VALUE 三、remove方法1234567891011121314public E remove(int index) &#123; rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved &gt; 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work return oldValue;&#125; 首先检查下标是否越界，获取需要删除的值，用来做返回值，如果要删除的元素不是最后一个元素，那么数组中后面的元素整体往前移动一位。 四、clear方法123456789public void clear() &#123; modCount++; // clear to let GC do its work for (int i = 0; i &lt; size; i++) elementData[i] = null; size = 0; &#125; 该方法实现比较简单，仅仅是将所有元素置为空了。 4、2 并发集合ConcurrentHashMap 分析： 与普通的HashMap相比，多了个concurrencyLevel属性，内部使用到了锁分段技术，Segment 数组，默认情况下有16个段。 put操作：该操作运行16个线程并发无阻塞操作集合镀锡，通过计算hash来确定Segment对象，借此对象的put方法来完成操作。 get操作：类似于put操作，也是借用Segment对象的get方法来实现的。由于Segment对象对象的数组HashEntity的数量是用volatile声明的，因此总是能正确的获取到数组的大小。而HashEntity的属性也是final，所以该链表对象不会发生改变。 4、3 HashMap和HashTable两者都实现了Map接口。HashMap： 非线程安全、高效、支持键值对都为null的 HashTable: 线程安全，不支持null值和null键 4、4 SortMap和TreeMap4、5 ArrayList和LinkListArrayList: 访问速度快 插入慢 开销不固定 底层是数组实现 LinkList: 随机访问速度较慢 插入快 底层是双向循环列表","categories":[{"name":"Java","slug":"Java","permalink":"wubc.me/categories/Java/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"wubc.me/tags/Java%E5%9F%BA%E7%A1%80/"}]},{"title":"zookeeper系列教程之一（Mac下安装zookeeper）","slug":"zookeeper系列教程之一（Mac下安装zookeeper）","date":"2020-02-29T07:09:30.000Z","updated":"2020-03-01T13:09:40.507Z","comments":true,"path":"2020/02/29/zookeeper系列教程之一（Mac下安装zookeeper）/","link":"","permalink":"wubc.me/2020/02/29/zookeeper%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80%EF%BC%88Mac%E4%B8%8B%E5%AE%89%E8%A3%85zookeeper%EF%BC%89/","excerpt":"","text":"一、 Mac下zookeeper的安装两种下载方式 第一种直接网上下载 下载地址：https://zookeeper.apache.org/releases.html#download 国内的镜像地址：https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/ 注意如果不需要源码包请下载文件名带bin的那个文件，那个是编译好的，否则运行zookeeper时会出现 错误: 找不到或无法加载主类 org.apache.zookeeper.server.quorum.QuorumPeerMain的问题 第二种使用homebrew下载： brew install zookeeper 二、配置1、配置解释 1234567891011121314151617181920212223242526272829# The number of milliseconds of each ticktickTime&#x3D;2000# The number of ticks that the initial # synchronization phase can takeinitLimit&#x3D;10# The number of ticks that can pass between # sending a request and getting an acknowledgementsyncLimit&#x3D;5# the directory where the snapshot is stored.# do not use &#x2F;tmp for storage, &#x2F;tmp here is just # example sakes.dataDir&#x3D;&#x2F;tmp&#x2F;zookeeper# the port at which the clients will connectclientPort&#x3D;2181# the maximum number of client connections.# increase this if you need to handle more clients#maxClientCnxns&#x3D;60## Be sure to read the maintenance section of the # administrator guide before turning on autopurge.## http:&#x2F;&#x2F;zookeeper.apache.org&#x2F;doc&#x2F;current&#x2F;zookeeperAdmin.html#sc_maintenance## The number of snapshots to retain in dataDir#autopurge.snapRetainCount&#x3D;3# Purge task interval in hours# Set to &quot;0&quot; to disable auto purge feature#autopurge.purgeInterval&#x3D;1server.1&#x3D;127.0.0.1:2888:3888 tickTime：ZK中的一个时间单元。ZK中所有时间都是以这个时间单元为基础，进行整数倍配置的。例如，session的最小超时时间是2*tickTime。 initLimit：Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。Leader允许F在initLimit时间内完成这个工作。通常情况下，我们不用太在意这个参数的设置。如果ZK集群的数据量确实很大了，F在启动的时候，从Leader上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了。(No Java system property) syncLimit：在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。如果L发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在线了。注意：不要把这个参数设置得过大，否则可能会掩盖一些问题。(No Java system property) dataDir：存储快照文件snapshot的目录。默认情况下，事务日志也会存储在这里。建议同时配置参数dataLogDir, 事务日志的写性能直接影响zk性能。 clientPort： 客户端连接server的端口，即对外服务端口，默认是2181。 server.x=[hostname]:nnnnn[:nnnnn]：这里的x是一个数字，与myid文件中的id是一致的。右边可以配置两个端口，第一个端口用于F和L之间的数据同步和其它通信，第二个端口用于Leader选举过程中投票通信。 2、配置修改 单机模式： 伪集群模式 三、启动与连接 1、服务端启动：进入zookeeper的bin目录，在终端下执行如下命令启动 ./zkServer.sh start 当输出Starting zookeeper … STARTED 时表示成功了 2、客户端连接，同样在bin目录下执行命令 ./zkCli.sh 然后就进入到JLine控制台命令交互模式 欢迎关注公众号 欢迎进入京东小店，领券购物更优惠","categories":[{"name":"分布式","slug":"分布式","permalink":"wubc.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"}],"tags":[{"name":"分布式","slug":"分布式","permalink":"wubc.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"zookeeper","slug":"zookeeper","permalink":"wubc.me/tags/zookeeper/"}]}]}